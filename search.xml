<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/27/First-test-blog/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">14</span>];</span><br><span class="line">    s=<span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>道生一，一生二，二生三，三生万物，万物负阴而抱阳，中气以为和。</p>
<p>​                                                                                                                        ——————————《道德经》</p>
]]></content>
      <tags>
        <tag>你好，世界</tag>
      </tags>
  </entry>
  <entry>
    <title>apk重打包动态调试</title>
    <url>/2022/01/17/JEB%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>  以一道apk题目学习apk重打包并进行动态调试</p>
<span id="more"></span>
<h1 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h1><p> 看到题目，看解压的文件就知道有native层的操作</p>
<p>看到dex文件的<code>onGoClick()</code>类</p>
<p><img src="image-20220117204226432.png" alt="image-20220117204226432"></p>
<p>判断的思路是：对输入进行<code>encrypt</code> <code>getSecret</code>方法的加密之后，和 <code>getSecret</code>方法加密的<code>getFlag</code>值进行比较。</p>
<p>两边都进行了同样的加密，所以可以简化程序为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( getFlag() .equal ( encrypt(input) ) )</span><br><span class="line">&#123;</span><br><span class="line">    success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>encrypt</code>方法和<code>getFlag</code>方法都在lib文件里</p>
<p>看到lib文件，简单明了</p>
<p><strong>encrypt函数</strong></p>
<p><img src="image-20220117204714356.png" alt="image-20220117204714356"></p>
<p>先改第一个参数类型为<code>JNIEnv *env</code>，正确解析出两个函数，看到for循环，作用是把a1的每一个值-1。</p>
<p><strong>getFlag函数</strong></p>
<p><img src="image-20220117204926055.png" alt="image-20220117204926055"></p>
<p>考虑到这个函数没有输入对他的影响，所以这里直接动调得到返回值</p>
<p>经过JEB动调，返回值是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ek`fz@q2^x/t^fn0mF^6/^rb`qanqntfg^E`hq|</span><br></pre></td></tr></table></figure>
<p>思路就是我的输入每一个字节-1，等于返回值，所以直接把返回值每字节+1即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;ek`fz@q2^x/t^fn0mF^6/^rb`qanqntfg^E`hq|&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)+<span class="number">1</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag&#123;Ar3_y0u_go1nG_70_scarborough_Fair&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="JEB动态调试"><a href="#JEB动态调试" class="headerlink" title="JEB动态调试"></a>JEB动态调试</h1><h2 id="0-大体步骤"><a href="#0-大体步骤" class="headerlink" title="0.大体步骤"></a>0.大体步骤</h2><p><img src="image-20220117210304834.png" alt="image-20220117210304834"></p>
<h2 id="1-能否调试"><a href="#1-能否调试" class="headerlink" title="1.能否调试"></a>1.能否调试</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>查看解压之后的 <code>AndroidManifest.xml</code> 文件，看是否有</p>
<p><img src="image-20220117210502192.png" alt="image-20220117210502192"></p>
<p>android:debuggable属性，如果没有就手动添加上 <code>android:debuggable=&quot;true&quot;</code> ，如果是false的话就改成true。</p>
<p><strong>解压方式：</strong>可以用一般的解压软件直接解压，或者是用apktool进行解压</p>
<p><strong>apktool：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apktool d ###.apk</span><br><span class="line">apktool b 文件夹名</span><br></pre></td></tr></table></figure>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>如果需要修改的话，就需要对apk文件进行解包修改，拆电视机容易，组装可就难了</p>
<p>再改完之后，通过apktool进行重打包</p>
<h4 id="apk解包"><a href="#apk解包" class="headerlink" title="apk解包"></a>apk解包</h4><p><img src="image-20220117212514460.png" alt="image-20220117212514460"></p>
<p>同目录下找到同名文件夹</p>
<p>这里如果是一般解压的话， <code>AndroidManifest.xml</code> 文件会被当作是二进制文件无法被打开，apktool解包的话，vscode正常打开，在进行必要的修改之后保存。</p>
<h4 id="apk打包"><a href="#apk打包" class="headerlink" title="apk打包"></a>apk打包</h4><p><img src="image-20220117213017020.png" alt="image-20220117213017020"></p>
<p>打包之后在文件夹中找到dist文件夹，里的新的apk文件。</p>
<h4 id="apk签名"><a href="#apk签名" class="headerlink" title="apk签名"></a>apk签名</h4><p>仅仅是打包的文件还是不能运行的，在<code>adb insall</code> 的时候也会报错，拖进模拟器会无法安装。</p>
<p><strong>为什么要签名：</strong></p>
<ul>
<li><p>由于开发商可能通过使用相同的 Package Name 来混淆替换已经安装的程序，以此保证签名不同的包不被替换</p>
</li>
<li><p>保证信息传输的完整性。签名对于包中的每个文件进行处理，以此确保包中内容不被替换</p>
</li>
<li><p>防止交易中的抵赖发生， Market 对软件的要求</p>
</li>
</ul>
<p>这里使用jdk自带的两个工具：keytool和jarsigner工具，在jdk目录中，这里方便起见先把jdk的bin目录添加在环境变量。</p>
<p>用keytool获得密钥，用后者进行签名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">keytool -genkey -<span class="built_in">alias</span> demo.keystore -keyalg RSA -validity 100 -keystore demo.keystore</span></span><br><span class="line"></span><br><span class="line">输入密钥库口令:</span><br><span class="line">密钥库口令太短 - 至少必须为 6 个字符</span><br><span class="line">输入密钥库口令:</span><br><span class="line">再次输入新口令:</span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  r</span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:  oo</span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:  t</span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:  k</span><br><span class="line">您所在的省/市/自治区名称是什么?</span><br><span class="line">  [Unknown]:  i</span><br><span class="line">该单位的双字母国家/地区代码是什么?</span><br><span class="line">  [Unknown]:  t</span><br><span class="line">CN=r, OU=oo, O=t, L=k, ST=i, C=t是否正确?</span><br><span class="line">  [否]:  Y</span><br><span class="line"></span><br><span class="line">输入 &lt;demo.keystore&gt; 的密钥口令</span><br><span class="line">        (如果和密钥库口令相同, 按回车):</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">jarsigner -keystore demo.keystore -signedjar 新.apk 打包的.apk demo.keystore</span></span><br><span class="line"></span><br><span class="line">输入密钥库的密码短语:</span><br><span class="line">jar 已签名。</span><br></pre></td></tr></table></figure>
<p>之后会生成一个新的apk文件，这个文件就可以正常使用了</p>
<h2 id="2-推送到安卓设备"><a href="#2-推送到安卓设备" class="headerlink" title="2.推送到安卓设备"></a>2.推送到安卓设备</h2><h3 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h3><p>adb连接，通过 <code>adb install mulu/aaa.apk</code> </p>
<h3 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h3><p>直接拖进去，命令 <code>adb connect 127.0.0.1:端口</code>，不同的模拟器有不同的端口，夜神模拟器的端口是62001. </p>
<h2 id="3-JEB附加调试"><a href="#3-JEB附加调试" class="headerlink" title="3.JEB附加调试"></a>3.JEB附加调试</h2><p>apk文件拖进jeb，在disassemble界面通过ctrl+b下断点。</p>
<p><img src="image-20220117211555191.png" alt="image-20220117211555191"></p>
<p>点击调试器里的开始调试，弹出进程选择界面</p>
<p><img src="image-20220117211711571.png" alt="image-20220117211711571"></p>
<p>这里直接附上就可以调试了，这时可以看到jeb会出现三个窗口</p>
<p><img src="image-20220117214426692.png" alt="image-20220117214426692"></p>
<p>这里主要关注的是局部变量，输入之后停在断点处。</p>
<p>通过f6单步调试</p>
<p><img src="image-20220117214735007.png" alt="image-20220117214735007"></p>
<p>这里注意v1的变量类型，string的s小写，单击可以修改</p>
<p><img src="image-20220117214818299.png" alt="image-20220117214818299"></p>
<p>这就可以得到这个函数的返回值了，就可以解题了。</p>
]]></content>
      <categories>
        <category>逆向工程学习</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Java语法</title>
    <url>/2022/01/11/Java%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="了解JAVA"><a href="#了解JAVA" class="headerlink" title="了解JAVA"></a>了解JAVA</h1><span id="more"></span>
<h2 id="JAVA的三种技术架构："><a href="#JAVA的三种技术架构：" class="headerlink" title="JAVA的三种技术架构："></a>JAVA的三种技术架构：</h2><p>JAVA SE: 标准版java，可以开发一般的程序，java语言的标准。</p>
<p>JAVA EE：企业版java，针对web应用程序开发。</p>
<p>JAVA ME：主要用于开发移动程序，被Android取代。</p>
<h2 id="java开发环境："><a href="#java开发环境：" class="headerlink" title="java开发环境："></a>java开发环境：</h2><p>Jre：Java Runtime Environment  Java运行环境</p>
<p>Jvm：Java Virtual Machine java虚拟机，和“核心类库” 组成了jre，jre只能运行java程序，开发java程序的话还需要JDK</p>
<p>JDK：Java Development Kit 开发工具包；<strong>Jdk=开发工具包+jre（jvm+核心类库）</strong></p>
<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>//用<span class="title">class</span>关键字定义一个主类叫 <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="comment">//定义一个主方法，格式固定</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);<span class="comment">//系统.输出.打印+换行（没有ln就少一个换行）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编译过程："><a href="#编译过程：" class="headerlink" title="编译过程："></a>编译过程：</h2><p>java代码 ———&gt; javac编译 ———&gt; 机器语言，由jvm来执行生成的class文件</p>
<h2 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h2><p>和c通用的，另加一个“文档注释”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	<span class="doctag">@author</span> 作者</span></span><br><span class="line"><span class="comment">	<span class="doctag">@version</span> 版本 @符号也是可以被解析的</span></span><br><span class="line"><span class="comment">	注释的内容</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型:"></a>数据类型:</h2><p>变量的定义格式：</p>
<blockquote>
<script type="math/tex; mode=display">
数据类型 变量名 = 初始化值 ;</script></blockquote>
<ul>
<li><p>整数默认int类型，定义long类型的数据时，要在数据<strong>后面</strong>加L。</p>
</li>
<li><p>浮点数默认double类型，定义float类型的数据时，要在数据<strong>后面</strong>加F。</p>
</li>
</ul>
<h3 id="数据类型的转化："><a href="#数据类型的转化：" class="headerlink" title="数据类型的转化："></a>数据类型的转化：</h3><p>1.占内存小的数据可以转化为占内存大的数据。</p>
<p>强制转化与C语言相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> b = (<span class="keyword">int</span>)a;</span><br><span class="line"><span class="comment">//注意！！！</span></span><br><span class="line"><span class="keyword">int</span> c = (<span class="keyword">int</span>)a+<span class="number">2.72</span>；(报错)</span><br><span class="line"><span class="keyword">int</span> c = (<span class="keyword">int</span>)(a+<span class="number">2.71</span>);（成功）</span><br></pre></td></tr></table></figure>
<h2 id="算数运算："><a href="#算数运算：" class="headerlink" title="算数运算："></a>算数运算：</h2><p><strong>运算符两侧的数据类型要保持一致</strong></p>
<ol>
<li>+：可以连接两个字符串，可以算数，可以算数和连接</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">System.out.println(a+b+<span class="string">&quot;hello&quot;</span>); <span class="comment">//30hello</span></span><br><span class="line"><span class="comment">//注意区分</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>+a+b); <span class="comment">//hello1020</span></span><br></pre></td></tr></table></figure>
<ol>
<li>可以用自增自减运算符</li>
</ol>
<p>关系运算符的结果是boolean类型；true 或者是 false（<strong>java的bool类型只有true和false</strong>）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>&amp;&amp;</th>
<th>\</th>
<th>\</th>
<th></th>
<th>！</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>与C语言一样</p>
<h3 id="三元运算符："><a href="#三元运算符：" class="headerlink" title="三元运算符："></a>三元运算符：</h3><p><strong>表达式1 ? 表达式2 ： 表达式3;</strong></p>
<p>表达式1如果真，就执行表达式2，否则就执行3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">compare</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;input two num: &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> in1 = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> in2 = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> max = Cmp(in1,in2);</span><br><span class="line">        System.out.println(<span class="string">&quot;较大的是：&quot;</span>+max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a&gt;b) ? a:b;					<span class="comment">//这里直接返回二者中较大的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获得键盘输入："><a href="#获得键盘输入：" class="headerlink" title="获得键盘输入："></a>获得键盘输入：</h1><h2 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h2><p>导包———-&gt;创建对象————&gt;接受数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> input = sc.nextlnt();</span><br></pre></td></tr></table></figure>
<h2 id="运用实例："><a href="#运用实例：" class="headerlink" title="运用实例："></a>运用实例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;		<span class="comment">//先导入需要的包，结尾需要分号</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">compare</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);		<span class="comment">//new一个对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;input two num: &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> in1 = sc.nextInt();						<span class="comment">//这里进行输入</span></span><br><span class="line">        <span class="keyword">int</span> in2 = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> max = Cmp(in1,in2);</span><br><span class="line">        System.out.println(<span class="string">&quot;较大的是：&quot;</span>+max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a&gt;b) ? a:b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里其实的输入形式有多种</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nextInt();<span class="comment">//这就是输入一个int类型的数</span></span><br><span class="line">nextLine();<span class="comment">//输入一个String类型</span></span><br><span class="line">nextByte();<span class="comment">//byte类型</span></span><br><span class="line">next();<span class="comment">//这个一般配合 next().charAt(0)来当作输入一个char类型使用</span></span><br><span class="line">nextFloat();<span class="comment">//输入一个浮点型</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<h1 id="如何用IDEA"><a href="#如何用IDEA" class="headerlink" title="如何用IDEA"></a>如何用IDEA</h1><ul>
<li>点击文件</li>
<li>新建项目（不能像dev一样单文件运行）</li>
<li>选Groovy</li>
<li>下一步</li>
<li>下一步</li>
<li>起项目的名字，选目录</li>
<li>完成之后进入项目</li>
<li><strong>找到“src”文件，在里面新建java类，不要在外面那个.java文件里写，执行不了</strong></li>
<li>写好之后直接shift+f10，可以创建多个文件写，切换的时候要第一次用ctrl+shift+f10，不然会一直运行上一个文件</li>
</ul>
<p>这里在src目录中可以建立多个文件，多个文件中可以包含多个main函数，但是class类的名字在众多文件中最好不要同名，会出bug</p>
<h1 id="方法和函数"><a href="#方法和函数" class="headerlink" title="方法和函数"></a>方法和函数</h1><p>方法又称函数，可以独立运行，和main属于并列关系</p>
<p>定义一个函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数修饰符 函数返回值类型 函数名(参数类型 参数名，参数类型 参数名…… )</span><br><span class="line">&#123;</span><br><span class="line">	……</span><br><span class="line">	return 返回值（必须要符合先前的定义）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印水仙花数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">W_F</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arge)</span>			<span class="comment">//main函数的参数是规定要这么写，不写会报错</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入一个三位数，打印出里面的所有水仙花数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> max = input.nextInt();</span><br><span class="line">        find(max);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> e,b,c,d;</span><br><span class="line">        <span class="keyword">int</span> p;</span><br><span class="line">        <span class="keyword">for</span>(;a&gt;<span class="number">100</span>;a--)</span><br><span class="line">        &#123;</span><br><span class="line">            b = a%<span class="number">10</span>;</span><br><span class="line">            c = a%<span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line">            d = a / <span class="number">100</span>;</span><br><span class="line">            p = (d==b)?a:<span class="number">0000</span>;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="重载："><a href="#重载：" class="headerlink" title="重载："></a>重载：</h1><p>同一个程序中，有多个同名函数，但是他们的参数列表不同，称为函数重载</p>
<h1 id="参数引用："><a href="#参数引用：" class="headerlink" title="参数引用："></a>参数引用：</h1><p>正常传参的话是正常的</p>
<p>在传递数组的时候要注意，引用函数修改数组之后，数组在原函数中也会发生变化（相当于传递了一个指针进去）</p>
<h2 id="运用switch-case："><a href="#运用switch-case：" class="headerlink" title="运用switch case："></a>运用switch case：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.plaf.synth.SynthEditorPaneUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arge)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[] = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">56</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">22</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;春天&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;xia天&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;dong天&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;qiu天&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;fuck&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和c语言基本一样</p>
<h2 id="数组的输入："><a href="#数组的输入：" class="headerlink" title="数组的输入："></a>数组的输入：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">score</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arge)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入成绩: &quot;</span>);</span><br><span class="line">        <span class="keyword">float</span>[] score = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">5</span>];</span><br><span class="line">        edit(score);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;score.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(i+<span class="string">&quot; got &quot;</span>+score[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Sum(score);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">edit</span><span class="params">(<span class="keyword">float</span>[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.print(i+<span class="string">&quot;: &quot;</span>);</span><br><span class="line">            a[i] = input.nextFloat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sum</span><span class="params">(<span class="keyword">float</span>[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;总成绩: &quot;</span>+sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均成绩: &quot;</span>+sum/i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数组反转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.print.Printable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">arryre</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] are)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//这里注意区分 一些数组的定义形式</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        Print(a);</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = a[i];</span><br><span class="line">            a[i] = a[a.length-<span class="number">1</span>-i];</span><br><span class="line">            a[a.length-<span class="number">1</span>-i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        Print(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>java里面没有像python的index函数一样的数组元素定位的方法，要自己实现一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">int</span>[] a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要查找的数: &quot;</span>);</span><br><span class="line">        num = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> addr = getIndex(a , num);</span><br><span class="line">        System.out.println(addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h1><p>同时存在 <strong>面向对象</strong>和 <strong>面向过程</strong>两种思维方式，面向：关注的意思</p>
<ul>
<li>面向过程：自己为了解决需求自己所构建的函数。</li>
<li>面向对象：为了解决需要寻找具备某些功能的对象，来构建程序。</li>
</ul>
<p>A:面向过程：强调的是过程，所有事情都需要自己完成</p>
<p>B:面向对象:   面向对象更加符合我们的思考习惯，自己不要那么辛苦，而我们仅仅只需要指挥或者找具备相应功能的对象帮助我们做事即可。</p>
<h2 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h2><p>类：代码都必须有指定的存放位置，这个位置成为“类”（class）。</p>
<p>用Java中的类描述当前分析的这个事物：事物的名称，就是Java中的类名。</p>
<p>当描述完一个事物之后，要在Java程序中使用这个事物，首先需要使用new 关键字创建出这个事物在Java中的对象，然后通过这个对象就可以调用其中的所有特征。（类似于结构体）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>//定义了一个<span class="title">person</span>类</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String sex;</span><br><span class="line">    String job;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eating</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;have food&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tperson</span>//定义一个主类，如果不运行的话可以没有<span class="title">main</span>函数</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person per1 = <span class="keyword">new</span> Person();<span class="comment">//new一个新的对象</span></span><br><span class="line"><span class="comment">//像C语言的结构体一样进行赋值</span></span><br><span class="line">        per1.age = <span class="number">18</span>;</span><br><span class="line">        per1.name = <span class="string">&quot;小王&quot;</span>;</span><br><span class="line">        per1.job = <span class="string">&quot;后勤管理&quot;</span>;</span><br><span class="line">        per1.sex = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">        <span class="comment">//这样就会调用类中的方法（函数）</span></span><br><span class="line">        per1.sleep();</span><br><span class="line">        per1.eating();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h3><h4 id="局部变量："><a href="#局部变量：" class="headerlink" title="局部变量："></a>局部变量：</h4><p>定义在函数中的变量。</p>
<h4 id="成员变量："><a href="#成员变量：" class="headerlink" title="成员变量："></a>成员变量：</h4><p>定义在类的成员位置上的变量，在整个类中都有效的变量(全局变量也是一种成员变量)</p>
<p>成员变量又分为 <strong>实例(对象)变量</strong> 和 <strong>类变量(static静态变量</strong>)。</p>
<p><strong>函数总是优先使用局部变量，从内往外找</strong></p>
<h2 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h2><h3 id="通过private关键字限制变量的访问权限："><a href="#通过private关键字限制变量的访问权限：" class="headerlink" title="通过private关键字限制变量的访问权限："></a>通过private关键字限制变量的访问权限：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Private</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        String job;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//这里用private给他限制住</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editage</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (num&gt;<span class="number">0</span> &amp;&amp; num &lt;<span class="number">200</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                age = num;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;fuck you&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//这里就可以对输入进行检查，从而保证age一定是正的</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Printage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            System.out.println(age);</span><br><span class="line">        &#125;<span class="comment">//因为被限制了，所以打印也要在这个类里面打印</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teperson</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arge)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Private per = <span class="keyword">new</span> Private();</span><br><span class="line">            per.name = <span class="string">&quot;FUCK&quot;</span>;</span><br><span class="line">            per.job = <span class="string">&quot;Mother&quot;</span>;</span><br><span class="line">            per.editage(<span class="number">19</span>);<span class="comment">//间接调用</span></span><br><span class="line">            System.out.println(per.job);</span><br><span class="line">            System.out.println(per.name);</span><br><span class="line">            per.Printage();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="开发中的书写习惯："><a href="#开发中的书写习惯：" class="headerlink" title="开发中的书写习惯："></a>开发中的书写习惯：</h3><p><em>一个类中成员变量全部私有，对外提供getXxxx函数或者setXxxx函数 ， Xxxx表示的成员变量的名字，而成员变量的名字中的第一个字母要大写。</em></p>
<p><em>\1) 在开发中如果在外界想给类中的私有成员变量赋值，那么通过类中的setXxxx函数进行对该成员变量赋值。</em></p>
<p><em>\2) 在开发中如果在外界想使用类中的私有成员变量，那么通过类中的getXxxx函数获得该成员变量。</em></p>
<p><strong>编程习惯是要通过间接的方式对类的内容进行访问</strong></p>
<h2 id="this关键字："><a href="#this关键字：" class="headerlink" title="this关键字："></a>this关键字：</h2><p>方法被哪个对象调用，在方法中就会有一个隐式的变量this记录着调用对象的地址。</p>
<p><strong>当局部变量和成员变量重名时</strong>。使用<strong>this</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">This</span>//定义一个<span class="title">public</span>类</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line">    <span class="comment">//都是私有变量</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">editName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在类中定义的函数，函数的参数和类的成员变量是重名的，这里使用this关键字来区分成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">editscore</span><span class="params">(<span class="keyword">int</span> score)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (score&gt;<span class="number">0</span> &amp;&amp; score&lt;<span class="number">200</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.score = score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testthis</span> // 定义一个新的测试类</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arges)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        This per = <span class="keyword">new</span> This();</span><br><span class="line">        <span class="comment">//这里的输入和自定义类其实是一样的，类名 变量 = 在类中new一个</span></span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名:&quot;</span>);</span><br><span class="line">        name = input.nextLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;成绩:&quot;</span>);</span><br><span class="line">        num = input.nextInt();</span><br><span class="line">        per.editName(name);</span><br><span class="line">        per.editscore(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他关键字："><a href="#其他关键字：" class="headerlink" title="其他关键字："></a>其他关键字：</h2><p>public：公开的类或者是变量，所有的类都可以进行使用或者引入（都可以用）</p>
<p>protected：受保护的类，只有子孙类和本类可以引入使用（同包或者同类）。这也是默认的类，如果class前面什么也不加就默认是protected。</p>
<p>private：只有在本类中才可以使用（同类）</p>
<p>public void 修饰是非静态方法，<strong>该类方法属于对象</strong>，在对象初始化（new Object()）后才能被调用；</p>
<p>public static void 修饰是<strong>静态方法，属于类，使用类名.方法名直接调用</strong>。</p>
<h2 id="构造函数："><a href="#构造函数：" class="headerlink" title="构造函数："></a>构造函数：</h2><p>是什么：在创建对象时会自动调用的函数</p>
<p>使用new关键字创建对象，创建完之后，就会调用当前这个类的构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Class()<span class="comment">//就是说以无参数构造方法实例化对象。</span></span><br></pre></td></tr></table></figure>
<h3 id="与一般函数的区别："><a href="#与一般函数的区别：" class="headerlink" title="与一般函数的区别："></a>与一般函数的区别：</h3><p><strong>一般函数的定义格式：</strong></p>
<p>修饰符 返回值类型 函数名（参数列表）</p>
<p>{</p>
<p>}</p>
<p><strong>构造函数（方法）格式：</strong>没有返回值类型，他也不需要</p>
<p>修饰符 构造函数名（ 参数列表 ）</p>
<p>{</p>
<p>}</p>
<p><strong><em>构造函数的名字要求必须和当前的类名一致</em></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EditAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EditName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stu (String name, <span class="keyword">int</span> age)<span class="comment">//构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">build_func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agre)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String name = input.nextLine();</span><br><span class="line">        <span class="keyword">int</span> num = input.nextInt();</span><br><span class="line">        Stu stu1 = <span class="keyword">new</span> Stu(name , num);<span class="comment">//在new对象的时候直接就进行初始化</span></span><br><span class="line">        System.out.println(<span class="string">&quot;测试构造函数&quot;</span>);</span><br><span class="line">        stu1.EditAge();</span><br><span class="line">        stu1.EditName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是自己写出来构造函数，如果没有的话就是默认构造函数，java经过javac编译之后会自动添加一个没有参数的构造函数。</p>
<p>根据不同的需要可以在类中同时写有参数的和没有参数的构造函数，他们以 <strong>重载</strong>的形式存在于类中。在new的时候根据参数的不同选择构造函数。</p>
<p>构造函数和一般函数对比</p>
<ul>
<li><p>构造函数当对象创建完成了，函数也执行完成了。</p>
</li>
<li><p>构造函数只有在new对象的时候，会被调用，一旦对象创建完成，我们不能手动的人为去调用构造函数。</p>
</li>
<li>构造函数可以调用一般函数，反之不行</li>
</ul>
<h3 id="构造函数的相互调用："><a href="#构造函数的相互调用：" class="headerlink" title="构造函数的相互调用："></a>构造函数的相互调用：</h3><p>用this关键字，不能通过函数名调用构造函数</p>
<ol>
<li><p><strong>构造函数不能相互嵌套调用，不然会导致程序选入死循环</strong></p>
</li>
<li><p><strong>this调用构造函数，必须放在构造函数的第一句</strong></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    student()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是无参构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    student(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是1参构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    student(String name , <span class="keyword">int</span> num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&quot;lala&quot;</span>);        <span class="comment">//这里通过this用了一参数的构造函数</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        score = num;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是2参构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot; 考了: &quot;</span>+score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">buildFunc2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arge)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        student stu = <span class="keyword">new</span> student(<span class="string">&quot;陈润基&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        stu.showinfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果这里不把this的调用放在第一行，那么这里就会报错说</p>
<blockquote>
<p>对this的调用必须是构造器中的第一个语句</p>
</blockquote>
<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><p>API：application programming interface。应用程序接口。</p>
<h2 id="Scanner类-与-String类："><a href="#Scanner类-与-String类：" class="headerlink" title="Scanner类 与 String类："></a>Scanner类 与 String类：</h2><h3 id="scanner："><a href="#scanner：" class="headerlink" title="scanner："></a>scanner：</h3><p>相当于时scanf函数用来接受外部输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Input</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String name = input.nextLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="string类："><a href="#string类：" class="headerlink" title="string类："></a>string类：</h3><p>Java中的所有常量：整数、小数、字符、字符串、null、真假值true false </p>
<p>由此可知，String类型不是java的基本数据类型，属于是引用类型，也成为 <strong>类类型</strong></p>
<p><strong>它不是存储在堆空间中，而是存储在方法区中的字符串常量池中</strong>。字符串常量池中保存的就是所有的字符串数据。只要我们书写了双引号，不管双引号中间是什么数据，这些数据都会立刻在字符串常量池中保存。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String a = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        String b = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        System.out.println(a == b); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用String类的构造函数创建的对象，那么这个对象就会在堆中出现。</strong>而在创建出的字符串对象中的字符数据保存在常量池中。</p>
<h3 id="使用String类的默认构造函数"><a href="#使用String类的默认构造函数" class="headerlink" title="使用String类的默认构造函数:"></a>使用String类的默认构造函数:</h3><h4 id="byte类型："><a href="#byte类型：" class="headerlink" title="byte类型："></a>byte类型：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">byte2string</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = &#123;<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>,<span class="number">97</span>,<span class="number">99</span>,<span class="number">121</span>&#125;;</span><br><span class="line">        String s = <span class="keyword">new</span> String(b);</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(b,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//数组，从0开始，往后数3个</span></span><br><span class="line">        System.out.println(s);<span class="comment">//ABCDacy</span></span><br><span class="line">        System.out.println(s1);<span class="comment">//ABC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="字符数组类型："><a href="#字符数组类型：" class="headerlink" title="字符数组类型："></a>字符数组类型：</h4><p>将数组转换成string类型的话</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Char2string</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[]  c = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] i = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        String s = <span class="keyword">new</span> String(c);</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(i,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s1);<span class="comment">//这里还是进行一个ascii的转化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="String类的运算操作："><a href="#String类的运算操作：" class="headerlink" title="String类的运算操作："></a>String类的运算操作：</h3><h4 id="比较："><a href="#比较：" class="headerlink" title="比较："></a>比较：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String str)</span><span class="comment">//比较字符串的内容是否相同,忽略大小写</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span>		<span class="comment">//判断字符串对象是否以指定的str开头</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span>		<span class="comment">//判断字符串对象是否以指定的str结尾</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p>这里不能用<code>==</code>来进行String类型的判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span>					<span class="comment">//获取字符串的长度，其实也就是字符个数</span></span></span><br><span class="line"><span class="function"> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span>		<span class="comment">//获取指定索引处的字符</span></span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span>		<span class="comment">//获取str在字符串对象中第一次出现的索引</span></span></span><br><span class="line"><span class="function"> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span>	<span class="comment">//从start索引开始截取字符串，截取到字符串最后</span></span></span><br><span class="line"><span class="function"> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span><span class="comment">//从start开始，到end结束截取字符串。包括start，不</span></span></span><br></pre></td></tr></table></figure>
<h4 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>[] toCharArray()<span class="comment">//把字符串转换为字符数组，相当于list了</span></span><br><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span><span class="comment">//把字符串中的所有大写字母转换为小写字母</span></span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span><span class="comment">//把字符串中的小写字母转换为大写字母</span></span></span><br></pre></td></tr></table></figure>
<h4 id="切割方法："><a href="#切割方法：" class="headerlink" title="切割方法："></a>切割方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span><span class="comment">//去除字符串两头的空格</span></span></span><br><span class="line"><span class="function">String[] <span class="title">split</span><span class="params">(String str)</span><span class="comment">//按照给定字符串进行分割</span></span></span><br></pre></td></tr></table></figure>
<h3 id="字符串缓冲区："><a href="#字符串缓冲区：" class="headerlink" title="字符串缓冲区："></a>字符串缓冲区：</h3><p>Java中提供2个字符串缓冲区StringBuffer和StringBuilder。</p>
<h2 id="集合的概念"><a href="#集合的概念" class="headerlink" title="集合的概念"></a>集合的概念</h2><h3 id="引出："><a href="#引出：" class="headerlink" title="引出："></a>引出：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stud</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stud</span><span class="params">(String name, <span class="keyword">int</span> score, <span class="keyword">int</span> age)</span><span class="comment">//构造函数必须和类同名</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Stud[] arr = <span class="keyword">new</span> Stud[<span class="number">3</span>];</span><br><span class="line">        Stud stu1 = <span class="keyword">new</span> Stud(<span class="string">&quot;小明&quot;</span>, <span class="number">18</span> , <span class="number">66</span>);</span><br><span class="line">        Stud stu2 = <span class="keyword">new</span> Stud(<span class="string">&quot;小张&quot;</span>, <span class="number">19</span> , <span class="number">88</span>);</span><br><span class="line">        Stud stu3 = <span class="keyword">new</span> Stud(<span class="string">&quot;小王&quot;</span>, <span class="number">21</span> , <span class="number">99</span>);</span><br><span class="line">        arr[<span class="number">0</span>] = stu1;</span><br><span class="line">        arr[<span class="number">1</span>] = stu2;</span><br><span class="line">        arr[<span class="number">2</span>] = stu3;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(arr[i].name+<span class="string">&#x27; &#x27;</span>+arr[i].age+<span class="string">&#x27; &#x27;</span>+arr[i].score);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，因为我在同一个src目录下创建的，然后后来应该是定义类的时候和前面的哪一个重名了，一直报错，把类名改一下就可以了</p>
<p>这里定义一个数组的方法</p>
<p>如果使用数组存储int类型的数据：int[] arr=new int[3];</p>
<p> 如果使用数组存储String类型的数据：String[] arr=new String[3];</p>
<p> <strong>如果使用数组存储Student类型的数据：Student[] arr=new Student[3];</strong></p>
<p>和结构体里面定义数组差不多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stud</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stud</span><span class="params">(String name, <span class="keyword">int</span> score, <span class="keyword">int</span> age)</span><span class="comment">//构造函数必须和类同名</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> len = input.nextInt();</span><br><span class="line">        String name;</span><br><span class="line">        String bin;</span><br><span class="line">        <span class="keyword">int</span> score;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        String[] nm = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>&#125;;</span><br><span class="line">        Stud[] arr = <span class="keyword">new</span> Stud[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;score: &quot;</span>);</span><br><span class="line">            score = input.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;name: &quot;</span>);</span><br><span class="line">            bin = input.nextLine();<span class="comment">//这里先把回车过滤过去，不然name就成回车了</span></span><br><span class="line">            name = input.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;age: &quot;</span>);</span><br><span class="line">            age = input.nextInt();</span><br><span class="line">            arr[i] = <span class="keyword">new</span> Stud(name, score , age);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(arr[i].name+<span class="string">&#x27; &#x27;</span>+arr[i].age+<span class="string">&#x27; &#x27;</span>+arr[i].score);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个程序要注意的就是那个字符串name的输入函数，先用一个输入过滤掉回车</p>
<h3 id="集合：一种存放对象的容器"><a href="#集合：一种存放对象的容器" class="headerlink" title="集合：一种存放对象的容器"></a>集合：一种存放对象的容器</h3><p>集合的概念：一种存放对象的容器，需要使用对象的事后，把对象取出来，再去使用，方便快捷</p>
<p>集合和数组的区别：</p>
<ul>
<li><p>数组是固定长度，集合长度可变</p>
</li>
<li><p>数组可以存储基本类型数据和引用类型数据（String类型和上面定义的Stud类型），集合只能存储引用类型的数据</p>
</li>
<li><p>数组的数据都是类型相同的，集合允许元素的类型不同</p>
</li>
</ul>
<h3 id="ArrayList集合："><a href="#ArrayList集合：" class="headerlink" title="ArrayList集合："></a>ArrayList集合：</h3><p>她的底层就是大小可变的数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">//引入ArratList包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//创建一个集合对象</span></span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot; world&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;test end&quot;</span>);</span><br><span class="line">        list.add(<span class="number">2</span>, <span class="string">&quot;android&quot;</span>);<span class="comment">//如果不指定位置就从头往后插入</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(list);   <span class="comment">//[hello,  world, android, test end]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="增添删改："><a href="#增添删改：" class="headerlink" title="增添删改："></a><strong>增添删改</strong>：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入集合的元素个数&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        String str;</span><br><span class="line">        String bin;</span><br><span class="line">        bin = input.nextLine();</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str = input.nextLine();</span><br><span class="line"><span class="comment">//            str = (String)(char)i;</span></span><br><span class="line">            list.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;刚刚输入的是&quot;</span>);</span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));<span class="comment">//可以通过get的形式类遍历整个集合</span></span><br><span class="line">        System.out.println(list.get(<span class="number">3</span>));</span><br><span class="line">        list.remove(<span class="number">2</span>);<span class="comment">//删除第二位之后，后面的会向前进一位</span></span><br><span class="line">        list.set(<span class="number">2</span>, <span class="string">&quot;99&quot;</span>);<span class="comment">//注意这里修改的事后要类型合适</span></span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">3</span>));</span><br><span class="line">        System.out.println(list.size());<span class="comment">//size返回集合元素个数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="增强for循环："><a href="#增强for循环：" class="headerlink" title="增强for循环："></a>增强for循环：</h4><p>这是看idea下面的提示才知道还有这么一回事</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object obj : list) <span class="comment">//使用增强for循环遍历集合</span></span><br><span class="line">&#123;</span><br><span class="line">	System.out.println(obj);<span class="comment">//取出并打印集合中的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个东西就像是python里的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span> i</span><br></pre></td></tr></table></figure>
<p>一样，不用再用get方法在集合里取值了，但是这里只能访问，不能修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    String title;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    String author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, String author, <span class="keyword">int</span> price)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfClassArray</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        ArrayList&lt;Book&gt; book = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)<span class="comment">//不能直接while 1，因为她的bool类型只有true和false</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;输入 &#x27;#&#x27; 退出: &quot;</span>);</span><br><span class="line">            op = input.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PrintBook(book);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                addBook(book);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintBook</span><span class="params">(ArrayList&lt;Book&gt; list)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下面是您输入保存的书目录：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作者  书名  价格&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Book elm :list)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(elm.author+<span class="string">&quot;: &quot;</span>+elm.title+<span class="string">&quot; --&gt; &quot;</span>+elm.price+<span class="string">&quot;$&quot;</span>);</span><br><span class="line">        &#125;           <span class="comment">//这里使用了加强版for循环</span></span><br><span class="line">    &#125;<span class="comment">//这里打印不能只println(elm)，每一个元素都相当于一个对象，这里的要打印出对象中的数据，否则会报错</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(ArrayList&lt;Book&gt; list)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;书名：&quot;</span>);</span><br><span class="line">        String name = input.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;作者：&quot;</span>);</span><br><span class="line">        String author = input.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;价格：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> price = input.nextInt();</span><br><span class="line"></span><br><span class="line">        Book temp = <span class="keyword">new</span> Book(name, author, price);</span><br><span class="line">        list.add(temp);<span class="comment">//这list里面都是一个个的对象</span></span><br><span class="line">        <span class="comment">//每个对象对应这自己的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上程序用了ArrayList将自定义的对象进行复制并且在退出之前进行遍历</p>
<h1 id="学生管理系统-java"><a href="#学生管理系统-java" class="headerlink" title="学生管理系统-java"></a>学生管理系统-java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*查看所有的学生信息，可以增加，修改，删除学生信息，学生信息包括学号，姓名，年龄，籍贯*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">allstu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String stuid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">allstu</span><span class="params">(String name, String addr, String stuid, <span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.stuid = stuid;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showname</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.print(name+<span class="string">&quot;: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showaddr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.print(addr+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showid</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.print(stuid+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.print(age+<span class="string">&quot;  。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">studentManager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        ArrayList&lt;allstu&gt; stu_list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Printalbe();</span><br><span class="line">            <span class="keyword">int</span> op = input.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (op)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    showInfo(stu_list);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;要删除哪一个: &quot;</span>);</span><br><span class="line">                    <span class="keyword">int</span> index = input.nextInt();</span><br><span class="line">                    rmInfo(stu_list, index-<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    addInfo(stu_list);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;要修改哪一个: &quot;</span>);</span><br><span class="line">                    <span class="keyword">int</span> index1 = input.nextInt();</span><br><span class="line">                    setInfo(stu_list, index1-<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;感谢使用&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Printalbe</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------欢迎来到学生管理系统--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1. 查看所有&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. 删除&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3. 增加&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4. 修改&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;5. 退出&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;选择: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addInfo</span><span class="params">(ArrayList&lt;allstu&gt; stu)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;姓名: &quot;</span>);</span><br><span class="line">        String name = input.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;地址: &quot;</span>);</span><br><span class="line">        String addr = input.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;学号: &quot;</span>);</span><br><span class="line">        String id = input.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;年龄: &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = input.nextInt();</span><br><span class="line"></span><br><span class="line">        allstu temp = <span class="keyword">new</span> allstu(name ,addr, id, age);</span><br><span class="line">        stu.add(temp);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(ArrayList&lt;allstu&gt; stu , <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        allstu temp = stu.get(index);</span><br><span class="line"></span><br><span class="line">        temp.showname();</span><br><span class="line">        temp.showid();</span><br><span class="line">        temp.showaddr();</span><br><span class="line">        temp.showage();</span><br><span class="line"></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;姓名: &quot;</span>);</span><br><span class="line">        String name = input.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;地址: &quot;</span>);</span><br><span class="line">        String addr = input.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;学号: &quot;</span>);</span><br><span class="line">        String id = input.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;年龄: &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = input.nextInt();</span><br><span class="line"></span><br><span class="line">        allstu new_stu = <span class="keyword">new</span> allstu(name ,addr, id, age);</span><br><span class="line"></span><br><span class="line">        stu.set(index , new_stu);					<span class="comment">//这里直接就在原来的位置修改了，没有新增</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rmInfo</span><span class="params">(ArrayList&lt;allstu&gt; stu, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        stu.remove(index);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">(ArrayList&lt;allstu&gt; stu)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stu.size() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(allstu pre : stu)</span><br><span class="line">            &#123;</span><br><span class="line">                pre.showname();</span><br><span class="line">                pre.showid();</span><br><span class="line">                pre.showage();</span><br><span class="line">                pre.showaddr();</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>链表学习（C语言）</title>
    <url>/2022/01/06/%E9%93%BE%E8%A1%A8%E5%AD%A6%E4%B9%A0%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="链表学习"><a href="#链表学习" class="headerlink" title="链表学习"></a>链表学习</h1><span id="more"></span>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><p>这里用一个学号+姓名的结构体学习单链表的 “头插法” 。 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> nums;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">STU</span> *<span class="title">next</span>;</span><span class="comment">//这里的next虽然拼写一样，但是在每一个节点的结构体里指向的都是他后面那个结构体</span></span><br><span class="line">&#125;;					<span class="comment">//这里新建结构体，一定要放在前面，不然后面的函数调用报错</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">opdata</span><span class="params">(struct STU *student)</span><span class="comment">//传进来一个结构体指针，该指针指向一个结构体</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;input the nums: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;student-&gt;nums);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;input the name: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, student-&gt;name);</span><br><span class="line">&#125;								<span class="comment">//这个指针指向的结构体赋值成功</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addnode</span><span class="params">(struct STU **student)</span><span class="comment">//这里传递的是“指向指针的指针”，</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">STU</span> *<span class="title">temp</span>, *<span class="title">new_stu</span>;</span></span><br><span class="line">	<span class="keyword">if</span> (*student != <span class="literal">NULL</span>)		<span class="comment">//这里说如果传进来的节点不是最后一个</span></span><br><span class="line">	&#123;							<span class="comment">//*student是内容所在的地址，student存放的是*student的地址</span></span><br><span class="line">		new_stu = (struct STU*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct STU));<span class="comment">//新建一个节点，并申请一个空间</span></span><br><span class="line">		opdata(new_stu);</span><br><span class="line"></span><br><span class="line">		temp = *student;	<span class="comment">//先将原先指向数据的地址保存为temp</span></span><br><span class="line">		*student = new_stu;	<span class="comment">//指针更新成新的指针</span></span><br><span class="line">		new_stu-&gt;next = temp;<span class="comment">//新的节点的next指针指向原来的节点</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>		<span class="comment">//传进来的是最后一个节点，也就是说链表是空的，这样直接在后面加就可以</span></span><br><span class="line">	&#123;</span><br><span class="line">		new_stu = (struct STU*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct STU));</span><br><span class="line">        opdata(new_stu);</span><br><span class="line">		*student = new_stu;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintData</span><span class="params">(struct STU *student)</span><span class="comment">//传进来一个指向结构体的指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">STU</span> *<span class="title">stu</span>;</span>				<span class="comment">//新建中间人，这里是为了防止参数被改变，使后面的释放函数出错</span></span><br><span class="line">	stu = student;</span><br><span class="line">	<span class="keyword">while</span>(stu != <span class="literal">NULL</span>)				<span class="comment">//等于NULL的话就说明到最后一个了，</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;xuehao is %u\n&quot;</span>, stu-&gt;nums);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;name is %s\n&quot;</span>, stu-&gt;name);</span><br><span class="line">		stu = stu-&gt;next;			<span class="comment">//不断指向next</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseMem</span><span class="params">(struct STU **student)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">STU</span>  *<span class="title">temp</span>;</span>		<span class="comment">//找第三方替换，不然直接free的话 只能free一个，剩下的free不了</span></span><br><span class="line">	<span class="keyword">while</span>( *student != <span class="literal">NULL</span> )<span class="comment">//内容所在的地址不是空的</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp = *student;	<span class="comment">//中间变量接受地址</span></span><br><span class="line">		*student = (*student)-&gt;next;	<span class="comment">//内容的地址指向下一组内容</span></span><br><span class="line">		<span class="built_in">free</span>(temp);			<span class="comment">//free掉刚刚的内存空间</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">STU</span>* <span class="title">student</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the addr of (*student) is %p\n&quot;</span>,student);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the addr of (&amp;student) is %p\n&quot;</span>,&amp;student);</span><br><span class="line">	addnode(&amp;student);			<span class="comment">//这里把这个结构体指针的地址传进去，让一个新的节点指向这个地址</span></span><br><span class="line">	PrintData(student);			<span class="comment">//这里就正常的传递一个结构体指针</span></span><br><span class="line">	releaseMem(&amp;student);		<span class="comment">//也是把这个结构体指针的地址传进去</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;successful&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于程序中指向指针的指针我理解为</p>
<p><img src="链表学习（C语言）/image-20220106192242683.png" alt="image-20220106192242683"></p>
<p>这里addnode和releaseMem函数的参数均是二级指针，这个指针指向了 “指向数据内容的一级指针” </p>
<h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OpStu</span><span class="params">(struct stu *student)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;name : &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, student -&gt; name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Score : &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;student -&gt; score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主要不同之处就在于这里的节点插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddStu</span><span class="params">(struct stu **student)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">new_stu</span> =</span> (struct stu*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct stu));</span><br><span class="line">    <span class="comment">//为新节点分配空间</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">end_node</span>;</span></span><br><span class="line">	<span class="comment">//创建静态变量来存储尾节点</span></span><br><span class="line">	OpStu(new_stu);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">if</span> (*student == <span class="literal">NULL</span>)<span class="comment">//如果是一个空链表</span></span><br><span class="line">	&#123;</span><br><span class="line">		*student = new_stu;<span class="comment">//直接把头的指针指向新生成的数据</span></span><br><span class="line">		new_stu-&gt;next = <span class="literal">NULL</span>;<span class="comment">//最后在他后面补上NULL，或者可以是</span></span><br><span class="line">        <span class="comment">//(*student) -&gt; next = NULL 解引用和-&gt;的优先级不一样</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//不是空链表</span></span><br><span class="line">	&#123;</span><br><span class="line">		end_node-&gt;next = new_stu;<span class="comment">//尾节点的下一项是新节点</span></span><br><span class="line">		new_stu-&gt;next = <span class="literal">NULL</span>;<span class="comment">//封底</span></span><br><span class="line">	&#125;</span><br><span class="line">	end_node = new_stu;<span class="comment">//尾接点指向新节点的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintNode</span><span class="params">(struct stu *students)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">temp</span>;</span></span><br><span class="line">	temp = students;</span><br><span class="line">	<span class="keyword">while</span>(temp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;name is %s, got %d scores\n&quot;</span>, temp-&gt;name, temp-&gt;score);</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FINISH\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleasMem</span><span class="params">(struct stu **students)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">temp</span>;</span></span><br><span class="line">	<span class="comment">//temp = *students;</span></span><br><span class="line">	<span class="keyword">while</span>(*students != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		temp = *students;</span><br><span class="line">		*students = (*students)-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(temp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;free end\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">student</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">5</span>;</span><br><span class="line">	<span class="keyword">while</span>(i!=<span class="number">0</span>)<span class="comment">//用五组数据进行测试</span></span><br><span class="line">	&#123;</span><br><span class="line">		AddStu(&amp;student);</span><br><span class="line">		i--;</span><br><span class="line">	&#125;</span><br><span class="line">	PrintNode(student);</span><br><span class="line">	ReleasMem(&amp;student);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入，删除"><a href="#插入，删除" class="headerlink" title="插入，删除"></a>插入，删除</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertNode</span><span class="params">(<span class="keyword">int</span> addr, struct stu *student)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//int count=0;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">stu</span> =</span> student;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">newstu</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">temp</span>;</span></span><br><span class="line">	<span class="keyword">for</span>(;addr<span class="number">-1</span>!=<span class="number">0</span>;addr--)<span class="comment">//先通过循环找到要插入的节点的位置</span></span><br><span class="line">	&#123;</span><br><span class="line">		stu = stu-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf(&quot;insert location---&gt; %s,%d\n\n&quot;,stu-&gt;name,stu-&gt;score);</span></span><br><span class="line">	newstu = (struct stu*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct stu));</span><br><span class="line">	OpStu(newstu);<span class="comment">//准备好要插入的新节点</span></span><br><span class="line"></span><br><span class="line">	temp = stu-&gt;next;<span class="comment">//将前一个节点的next指针用temp保存</span></span><br><span class="line">	stu-&gt;next = newstu;<span class="comment">//前一个节点的next指针指向新的插入的节点</span></span><br><span class="line">	newstu-&gt;next = temp;<span class="comment">//新节点的next指针指向原来的节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeletNode</span><span class="params">(<span class="keyword">int</span> addr, struct stu* student)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">under</span>, *<span class="title">stu</span>, *<span class="title">pre</span>;</span></span><br><span class="line">	stu = student;</span><br><span class="line">	<span class="keyword">for</span>(;addr!=<span class="number">1</span>;addr--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (addr == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			pre = stu;<span class="comment">//将要删除节点的前一个节点保存</span></span><br><span class="line">		&#125;</span><br><span class="line">		stu = stu-&gt;next;<span class="comment">//找到要删除的节点</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf(&quot;delete location---&gt; %s,%d\n\n&quot;,stu-&gt;name,stu-&gt;score);</span></span><br><span class="line">	under = stu-&gt;next;<span class="comment">//保存要删除节点的后一个节点</span></span><br><span class="line">    pre-&gt;next = under;<span class="comment">//将删除节点的前一个节点指向后一个节点</span></span><br><span class="line">	<span class="comment">//printf(&quot;pre location---&gt; %s,%d\n\n&quot;,pre-&gt;name,pre-&gt;score);</span></span><br><span class="line">	<span class="comment">//printf(&quot;under location---&gt; %s,%d\n\n&quot;,under-&gt;name, under-&gt;score);</span></span><br><span class="line">	<span class="built_in">free</span>(stu);<span class="comment">//free掉删除的节点的内存空间</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;delete success&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入：</p>
<p><img src="链表学习（C语言）/image-20220107123357566.png" alt="image-20220107123357566"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构入门</tag>
      </tags>
  </entry>
  <entry>
    <title>CGnetsw修改器</title>
    <url>/2021/12/16/CGnetsw%E4%BF%AE%E6%94%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="CGnetsw修改器"><a href="#CGnetsw修改器" class="headerlink" title="CGnetsw修改器"></a>CGnetsw修改器</h1><span id="more"></span>
<h2 id="断网的原理"><a href="#断网的原理" class="headerlink" title="断网的原理"></a>断网的原理</h2><p>通过删除本机路由，并写入cg平台自己的ip于hosts文件，实现只能访问CG平台的功能。</p>
<p>关闭程序后，将本机路由进行恢复，实现正常上网。</p>
<h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>通过ida联合动调，找到断网函数的位置：</p>
<p><img src="image-20211216192901951.png" alt="image-20211216192901951"></p>
<p>这个函数执行之后实现本机断网。</p>
<p>修改思路：将函数nop之后平衡堆栈，使程序正常运行</p>
<h3 id="2020版"><a href="#2020版" class="headerlink" title="2020版"></a>2020版</h3><p>这是我遇到的第一版的断网程序</p>
<p><img src="image-20211216193056827.png" alt="image-20211216193056827"></p>
<p>gcc编译，32位，无壳</p>
<p>IDA中查看winmain函数</p>
<p><img src="image-20211216193345120.png" alt="image-20211216193345120"></p>
<h4 id="大体分析："><a href="#大体分析：" class="headerlink" title="大体分析："></a>大体分析：</h4><ol>
<li><p>首先进行一个ip地址的获取放在<code>String</code>中，如果没有获取到正确的ip，那么就将CG平台的主ip进行赋值（各个学校有不同的ip地址）。</p>
</li>
<li><p>然后进行日志记录（这里不是很清楚为什么记录日志）。</p>
</li>
<li>v14和下面的语句实现了一个字符的拼接功能，用处不大。</li>
<li>v15和<code>SetWindowTextW</code>函数实现了窗口的初始化，没啥用。</li>
<li>下面对hosts表进行了修改，然后进去了<code>deleteip</code>函数。</li>
</ol>
<p>在<code>deleteip</code>函数中，找到删除本机路由的函数</p>
<p><img src="image-20211216194126785.png" alt="image-20211216194126785"></p>
<p>删除路由的函数成功返回0，也就是说这里不能执行判断里面的内容</p>
<p><img src="image-20211216194236740.png" alt="image-20211216194236740"></p>
<p>看到这里的汇编代码</p>
<p><img src="image-20211216194336541.png" alt="image-20211216194336541"></p>
<p>eax一定为 “ 1 ” ，也就是0x401edd处的跳转实现，否则程序就会意外终止或者不能达到效果。</p>
<p>这里看到函数的调用规则<code>__cdecl</code> ，这里思路将delete函数nop掉，这样没有调用函数，esp就通过-0恢复，（我认为对程序的修改越小越好，所以就没有将<code>sub esp , 4</code>全nop掉）。再看到下面的<code>test eax,eax</code> ，若把delete函数nop之后，<code>eax == 1</code> 这里显然如果要跳转的话需要=0，所以这里直接将<code>test</code>指令修改为<code>cmp</code>指令，他俩指令的占字节位是一样的。</p>
<h4 id="给出脚本："><a href="#给出脚本：" class="headerlink" title="给出脚本："></a>给出脚本：</h4><p>这里我通过C语言直接修改文件中相对的机器码来实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> nop_cmp[]=&#123;<span class="number">0x90</span> ,<span class="number">0x90</span> ,<span class="number">0x90</span> ,<span class="number">0x90</span> ,<span class="number">0x90</span> ,<span class="number">0x83</span> ,<span class="number">0xEC</span> ,<span class="number">0x00</span> ,<span class="number">0x39</span>&#125;;</span><br><span class="line"><span class="comment">//这是将程序修改之后对应的机器码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* p;</span><br><span class="line">    p=fopen(<span class="string">&quot;CGnetsw.exe&quot;</span>,<span class="string">&quot;r+&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败，请手动填写文件名\n&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">        p=fopen(name , <span class="string">&quot;r+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fseek(p,<span class="number">0x12d5</span>,SEEK_SET);</span><br><span class="line">    <span class="comment">//要修改的机器码对应文件头的偏移</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fwrite(&amp;nop_cmp[i],<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">1</span>,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;success\n&quot;</span>);</span><br><span class="line">    fclose(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样文件就可以远程欺骗CG平台，同时本地也可以上网。（经实测得到）</p>
<h3 id="2021版"><a href="#2021版" class="headerlink" title="2021版"></a>2021版</h3><p>CG平台对程序进行了改版，临近期末，便不再深究改了哪里，直接寻找关键函数</p>
<h4 id="大体分析：-1"><a href="#大体分析：-1" class="headerlink" title="大体分析："></a>大体分析：</h4><p>依旧是32位无壳GCC编译的小程序</p>
<p><img src="image-20211216200044105.png" alt="image-20211216200044105"></p>
<p>ida中查看，程序明显的改动是先进行修改hosts，删除路由，然后再生成窗口。</p>
<p>思路同上一版本相似，但是main函数中多出一个判断</p>
<p><img src="image-20211216200304369.png" alt="image-20211216200304369"></p>
<p>这个判断经过分析实测，在win10系统中第一次运行会进行重启电脑的操作，产生的压缩包内有两个注册表文件，猜测这里应该是为了适应不同版本的功能。</p>
<p>压缩包内文件：</p>
<p><img src="image-20211216200443647.png" alt="image-20211216200443647"></p>
<p>时间有点古怪，可能是我电脑运行过老程序的问题，这里不做深究。</p>
<p>看到下面依旧是进行dns的修改，然后删除本机路由</p>
<p><img src="image-20211216200629735.png" alt="image-20211216200629735"></p>
<p>这里的三联ip串包括：cg平台的ip，本机的dns服务器地址，114.114.114.114（三大运营商通用dns服务器地址），三个地址通过逗号连接。</p>
<h4 id="给出脚本：-1"><a href="#给出脚本：-1" class="headerlink" title="给出脚本："></a>给出脚本：</h4><p>进入关键函数，和2020版基本一样，这里只需要更改一下去年的偏移即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> nop_cmp[]=&#123;<span class="number">0x90</span> ,<span class="number">0x90</span> ,<span class="number">0x90</span> ,<span class="number">0x90</span> ,<span class="number">0x90</span> ,<span class="number">0x83</span> ,<span class="number">0xEC</span> ,<span class="number">0x00</span> ,<span class="number">0x39</span>&#125;;</span><br><span class="line"><span class="comment">//这是将程序修改之后对应的机器码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* p;</span><br><span class="line">    p=fopen(<span class="string">&quot;CGnetsw.exe&quot;</span>,<span class="string">&quot;r+&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败，请手动填写文件名\n&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">        p=fopen(name , <span class="string">&quot;r+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fseek(p,<span class="number">0x1f15</span>,SEEK_SET);</span><br><span class="line">    <span class="comment">//要修改的机器码对应文件头的偏移，这里是2020和2021不一样的地方</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fwrite(&amp;nop_cmp[i],<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">1</span>,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;success\n&quot;</span>);</span><br><span class="line">    fclose(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然对程序进行了升级，但是关键地方还是老样子，没有远程验证，这个我估计以后会加上去。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望大家认真考试，不要总是想着这些歪门邪道。<strong>攻防无界</strong></p>
]]></content>
      <categories>
        <category>逆向工程学习</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>java配置</title>
    <url>/2021/12/13/java%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>​       </p>
<h1 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h1>  <span id="more"></span>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在：<a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a></p>
<p>可以下载到java8或者是11的JDK，下载的时候看好发行的版本（linux，macos，Windows）</p>
<p>下载好之后开始安装</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>按照提示安装就好，注意尽量不要放在C盘，我安装在了D盘。</p>
<p>在安装的时候可能会有报错</p>
<p><strong>报错1</strong>：“以下应用程序正在使用需要由此安装程序更新的文件”</p>
<p>这个错误会同时给出一个占用的进程的PID，在Windows下用管理员命令，打开命令提示符界面，</p>
<p>输入<code>netstat -ano</code>命令，该命令用来查看进程的id，上面给出了就不必要了。命令<code>taskkill /f /pid xxxxx</code>这个命令用来kill特定的进程，kill之后点击安装程序的”重试“就可以了。</p>
<p><strong>报错2：</strong>”以下应用程序正在使用需要由此安装程序更新的文件“</p>
<p>这个报错一般会跟在报错1的后面，同时也给出一个进程号，用上面的命令给他kill了之后点击安装程序的”重试“就可以了。</p>
<p>看好安装路径，然后就安装完成了。</p>
<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>这里需要配置的是 系统变量  </strong></p>
<p><img src="image-20211213214053090.png" alt="image-20211213214053090"></p>
<p>下面这里的变量，不牵扯到上面的 <strong>用户变量</strong></p>
<h2 id="配置变量"><a href="#配置变量" class="headerlink" title="配置变量"></a>配置变量</h2><ul>
<li>新建系统变量<code>CLASSPATH</code> ，值为：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib%JAVA_HOME%\lib\tools.jar    //注意前面小数点和分号。</span><br></pre></td></tr></table></figure>
<ul>
<li>新建系统变量<code>JAVA_HOME</code> ，值为：你安装的那个<strong>jdk</strong>的路径</li>
<li>找到系统变量里的 Path ，新增（一行的话中间用分号分隔）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>cmd窗口输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java</span><br><span class="line">javac</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>如果都有回显的话说明配置成功</p>
<p><strong><em>例外：</em></strong>有时候javac可能会出错，这里把前面的%路径全都改成绝对路径解决</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓逆向学习路径</title>
    <url>/2021/11/24/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p> 在52破解上看到的一篇安卓逆向的学习路线，这里记录一下，以便后续使用</p>
<span id="more"></span>
<h2 id="基础学习"><a href="#基础学习" class="headerlink" title="基础学习"></a>基础学习</h2><ul>
<li>熟练使用AndroidKiller、Jeb等工具 </li>
<li>了解smali语言，能够将简单的sali语句翻译成java </li>
<li>能够使用AndroidStudio进行java层面的动态调试 </li>
<li>了解arm汇编语言 </li>
<li>从0到一编写一个so文件 </li>
<li>能够配合ida对so成进行动态调试 </li>
<li>配合so层的编写经验实现自己的反调试代码，并一一动手调试过掉这些反调试</li>
<li>总结：java和smail语言基础；arm架构汇编；熟练使用相关工具；自己实现so</li>
</ul>
<p>基础学习：<a href="https://www.52pojie.cn/thread-742703-1-1.html">《教我兄弟学Android逆向系列课程+附件导航帖》 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
<h2 id="进阶技能"><a href="#进阶技能" class="headerlink" title="进阶技能"></a>进阶技能</h2><ul>
<li>了解安卓apk包的架构，能解析apk的各种文件，例如dex、xml文件 </li>
<li>了解动态加载的技术 </li>
<li>学习安卓第一代壳(落地加载壳)的加固方案然后自己动手实现 </li>
<li>学习frida，会使用frida编写简单的脱壳机  </li>
<li>学习安卓第二代壳(不落地加载壳)的加固方案有条件就自己实现一下 </li>
<li>针对第一代壳和第二代壳的加载点无论是使用动态调试还是hook的方法脱壳修复 </li>
<li>了解第三代壳(函数抽取式壳)和第四代壳(vmp)的原理 </li>
<li>学会使用或者自己编写针对第三代壳的脱壳机，例如:fart、frida-unpack等等 </li>
<li>能自己解析so文件<strong>，</strong>也就是elf文件，这是后面so层加密加固的前提 </li>
<li>有时间可以学习一下unicorn框架，github上已经有基于unicorn的so调用器，名字叫啥忘了 </li>
<li>学习so层的一些加密加固方案</li>
<li>然后还要ollvm框架，ollvm用来对抗ida的分析那滋味是真的酸爽（52破解无名侠师傅）</li>
</ul>
<p>书籍推荐：姜维大佬的小黄书和非虫大佬的安卓逆向</p>
]]></content>
      <categories>
        <category>逆向工程学习</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>flare-on2014复现记录</title>
    <url>/2021/11/14/flare-2014/</url>
    <content><![CDATA[<p> 复现了flare-on2014的部分题目，有的题目已经不具时效性，或者相关软件已经无法找到，便不再复现。</p>
<span id="more"></span>
<h2 id="Flare-on-1"><a href="#Flare-on-1" class="headerlink" title="Flare-on 1"></a>Flare-on 1</h2><p>签到题，给了一个安装程序（这个不是题目），安装之后得到一个NET文件，直接拖进dnspy</p>
<p>断在程序入口点</p>
<p><img src="image-20211123202529321.png" alt="image-20211123202529321"></p>
<p>跟进Form1()下好断点</p>
<p>然后在他下面的函数那里下好断电</p>
<p><img src="image-20211123202715849.png" alt="image-20211123202715849"></p>
<p>看到下面的几个for循环，这里直接下断点</p>
<p><img src="image-20211123202844320.png" alt="image-20211123202844320"></p>
<p>然后直接继续运行，这里观察下面的内存窗口，就可以看到flag</p>
<p><img src="image-20211123202936006.png" alt="image-20211123202936006"></p>
<p>这个题目一开始给一张图片，然后按下按钮上面的字会变成乱码，很容易猜到这是把flag给改变了</p>
<h2 id="Flare-on-2"><a href="#Flare-on-2" class="headerlink" title="Flare-on 2"></a>Flare-on 2</h2><p>题目给了一个图片，直接想到可能是图片隐写，winhex观察</p>
<p><img src="image-20211123203219289.png" alt="image-20211123203219289"></p>
<p>这里看反正是隐写了一种语言的代码，再下面还有一些代码</p>
<p><img src="image-20211123203331215.png" alt="image-20211123203331215"></p>
<p>将数据和代码提取出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">order = [</span><br><span class="line">	<span class="number">59</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">13</span>, <span class="number">35</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">81</span>, <span class="number">76</span>, <span class="number">10</span>, <span class="number">28</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">11</span>, <span class="number">76</span>, <span class="number">68</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">45</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">63</span>, <span class="number">58</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">23</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">7</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">49</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">58</span>, <span class="number">66</span>, <span class="number">3</span>, <span class="number">86</span>, <span class="number">27</span>, <span class="number">88</span>, <span class="number">77</span>, <span class="number">80</span>, <span class="number">38</span>, <span class="number">25</span>, <span class="number">40</span>, <span class="number">81</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">76</span>, <span class="number">81</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">81</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">28</span>, <span class="number">7</span>, <span class="number">88</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">90</span>, <span class="number">52</span>, <span class="number">80</span>, <span class="number">58</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">66</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">72</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">11</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">70</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">91</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">72</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">70</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">75</span>, <span class="number">11</span>, <span class="number">79</span>, <span class="number">28</span>, <span class="number">27</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">42</span>, <span class="number">23</span>, <span class="number">88</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">35</span>, <span class="number">68</span>, <span class="number">38</span>, <span class="number">63</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">38</span>, <span class="number">45</span>, <span class="number">30</span>, <span class="number">81</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">81</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">28</span>, <span class="number">23</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">1</span>, <span class="number">43</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">40</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">70</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">4</span>, <span class="number">51</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">70</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">49</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">21</span>, <span class="number">47</span>, <span class="number">93</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">58</span>, <span class="number">82</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">82</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">29</span>, <span class="number">29</span>, <span class="number">47</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">terms = [</span><br><span class="line">	<span class="string">&quot;M&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;z&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;@&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;|&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里就是用orde里的值来索引trems</p>
<p>用python来跑一下，得到一串base64密文，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=<span class="string">&#x27;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$___</span>=<span class="string">&quot;\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$___</span>(<span class="variable">$__</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解开密文，得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;\97\49\49\68\x4F\84\116\x68\97\x74\x44\x4F\x54\x6A\97\x76\x61\x35\x63\x72\97\x70\x41\84\x66\x6C\97\x72\x65\x44\65\x53\72\111\110\68\79\84\99\x6F\x6D&quot;</span>])) </span><br><span class="line">&#123; <span class="keyword">eval</span>(base64_decode(<span class="variable">$_POST</span>[<span class="string">&quot;\97\49\x31\68\x4F\x54\116\104\x61\116\x44\79\x54\106\97\118\97\53\x63\114\x61\x70\65\84\102\x6C\x61\114\101\x44\65\x53\72\111\x6E\x44\x4F\84\99\x6F\x6D&quot;</span>])); </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$code</span>=base64_decode(<span class="variable">$_</span>);<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">下面那个没解出来</span><br></pre></td></tr></table></figure>
<p>直接把后面的内容再用base解开，就能得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a11DOTthatDOTjava5crapATflareDASHonDOTcom</span><br></pre></td></tr></table></figure>
<p>这里把里面的DOT换成点，AT换成@，DASH换成-</p>
<p>网页其实是迷惑人的，关键在图片隐写</p>
<h2 id="Flare-on-3"><a href="#Flare-on-3" class="headerlink" title="Flare-on 3"></a>Flare-on 3</h2><p>这个就纯动态调试了，没啥别的。不过出题人的本意应该是考察idc的使用</p>
<p>给了一个没有后缀的32位PE文件（winhex得出），然后加上后缀运行，直接弹错。不难看出，这里的报错是刻意为之的</p>
<p>进ida看一下</p>
<p><img src="image-20211123204253909.png" alt="image-20211123204253909"></p>
<p>函数不多，但是没有什么实际价值</p>
<p><img src="image-20211123204310491.png" alt="image-20211123204310491"></p>
<p>这里看起来需要动态调试，打开x32dbg，直接在0x401000处下断点，然后f9，来到最后的一个call这里</p>
<p><img src="image-20211103194501505.png" alt="image-20211103194501505"></p>
<p>f7跟进之后，f8往下走，发现这里一个和0x66的异或，看一下异或之后的数据</p>
<p>在循环的时候，看到下面的指令在不断变化，这里直接在内存窗口看一下</p>
<p>循环结束之后发下字符串</p>
<p> <code>so it beginshus</code>：这应该是开始的标志</p>
<p>在jmp之后又遇到一个循环，看到又在内存中生成了一串字符串</p>
<p><img src="image-20211103195406253.png" alt="image-20211103195406253"></p>
<p>这里还是不清楚他想表达什么，但是这些字符串没有出现在程序窗口中，应该是作者刻意为之，继续往下跑</p>
<p>时刻观察着内存窗口，然后一直往下跑，不一会就看到了flag</p>
<p><img src="image-20211103195648942.png" alt="image-20211103195648942"></p>
<h2 id="Flare-on-4"><a href="#Flare-on-4" class="headerlink" title="Flare-on 4"></a>Flare-on 4</h2><p>这个pdf有一个背景，就是mandiant公司在2014年揭露了一个中国的国营黑客组织</p>
<blockquote>
<p> “61398股”工作的性质被中国视为国家机密：然而，我们相信它从事有害的”计算机网络操作”。</p>
<p>61398号机组部分位于高桥镇大同路（路旁），位于上海浦东新区（区）。该大院的中心建筑是一个 130，663 平方英尺的设施，高 12 层，建于 2007 年初。</p>
<p>我们估计，61398股有成百上千的人员，根据61398股的有形基础设施的规模。</p>
<p>中国电信以国防的名义为该单位提供了特殊的光纤通信基础设施。</p>
<p>61398股要求其人员接受计算机安全和计算机网络操作培训，并要求其人员精通英语。</p>
</blockquote>
<p>给了一个PDF，看官方wp，在用老版本的pdf阅读器的时候，程序会执行一些代码，但是我没有找到这个阅读器，现在的阅读器过于先进和安全，所以就没有成功复现</p>
<h2 id="Flare-on-5"><a href="#Flare-on-5" class="headerlink" title="Flare-on 5"></a>Flare-on 5</h2><p>这是一个简单的dll逆向吧，开始想去直接动态调试，但是dll文件没有动起来，就只能静态看看了</p>
<p>ida进去找到dllmain函数</p>
<p><img src="image-20211107214222015.png" alt="image-20211107214222015"></p>
<p>分析了一堆没啥用的api函数，最后在下面找到了关键函数</p>
<p><img src="image-20211107214331089.png" alt="image-20211107214331089"></p>
<p>这里发现有俩函数，都跟进去看一下</p>
<p>第一个函数：</p>
<p><img src="image-20211107214452357.png" alt="image-20211107214452357"></p>
<p>这时要学会浏览函数列表，列表中总会有一些函数，有奇怪的作用（算是一个逆向的技巧吧）</p>
<p>然后找到了一个函数（从上往下第四位）</p>
<p><img src="image-20211107214757593.png" alt="image-20211107214757593"></p>
<p>函数很大，这里直接用c语言模拟一下</p>
<p><img src="image-20211107215840081.png" alt="image-20211107215840081"></p>
<p>得到这个，考虑到这是dll文件，所以这里考虑输出这个函数，他就运行成功了</p>
<p>然后跟进xref向回引用查找</p>
<p><img src="image-20211107220004372.png" alt="image-20211107220004372"></p>
<p>这里调用了成功函数，看到只有当这个数组&gt;0时，才可以，所以看一下他在哪里被赋值了</p>
<p><img src="image-20211107220110634.png" alt="image-20211107220110634"></p>
<p>这里跳转到下面那个，</p>
<p><img src="image-20211107220139870.png" alt="image-20211107220139870"></p>
<p>这里再看他赋值为1的条件，是上面那个大于0，以此类推，靠着这个数组的和0比较的大小，不停的向回跳转，然后每一个函数最后都有一个返回值</p>
<p><img src="image-20211107220319910.png" alt="image-20211107220319910"></p>
<p>根据xref的顺序记录一下返回值（这把一些英文单词换成符号）</p>
<p>得到：l0gging.ur.5tr0ke5atflare-on.com</p>
<h2 id="Flare-on-6"><a href="#Flare-on-6" class="headerlink" title="Flare-on 6"></a>Flare-on 6</h2><p>这个elf文件不会，看他们分析也分析不出来</p>
<h2 id="Flare-on-7"><a href="#Flare-on-7" class="headerlink" title="Flare-on 7"></a>Flare-on 7</h2><p>这个程序我不敢在本机跑，然后再win7虚拟机里跑也会出错，说他是个16位的程序，但是实际上是32位的，我不理解，这里记录一下题目中的涉及的反调试函数</p>
<p>IsDebuggerPresent() //调试时会返回1</p>
<p>IDT() //检查是否使用虚拟机</p>
<p><img src="image-20211123210400912.png" alt="image-20211123210400912"></p>
<p>通过使用特权指令判断是否使用虚拟机</p>
<p><img src="image-20211123210427090.png" alt="image-20211123210427090"></p>
<p>计算了1e1030到1e1780之间的0xCC数量，未调试时应为0x55</p>
<p><img src="image-20211123210524084.png" alt="image-20211123210524084"></p>
<p>peb中的BeingDebugged，当调试时这个值为1</p>
<p><img src="image-20211123210559391.png" alt="image-20211123210559391"></p>
<p>peb偏移0x68处为未公开的一处位置，调试时这个值为0x70</p>
<p><img src="image-20211123210629610.png" alt="image-20211123210629610"></p>
<p>以上参考harmonica11师傅的博客，我也没有找到这些函数</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>近期比赛问题</title>
    <url>/2021/10/16/%E8%BF%91%E6%9C%9F%E6%AF%94%E8%B5%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<pre><code> 2021-10 强网杯，字节跳动，莲城杯等比赛总结
</code></pre><p>安恒月赛中的逆向相对容易，但是涉及到大量的对称加密以及非对称加密的问题，拿到带有加密的逆向多少手足无措。还有就是编程基础的欠缺，对编程语言知之甚少，还有就是对编程术语比如“断言”，“Panic”</p>
<h2 id="莲城杯"><a href="#莲城杯" class="headerlink" title="莲城杯"></a>莲城杯</h2><p>baby_rust：是用rust语言写的程序，通过wp知道根据rust语言的特点可以很快解答</p>
<p>longtime：对算法的理解和关键代码的定位能力欠缺，不能有效的识别算法，也不能优化算法。</p>
<p>brainfuck: 一种比较脑洞的加密形式，理解分析能力不够，编码能力差的离谱</p>
<p>README：代码分析能力，AES算法不了解，分辨不出魔改的TEA加密。</p>
<h2 id="强网杯"><a href="#强网杯" class="headerlink" title="强网杯"></a>强网杯</h2>]]></content>
      <categories>
        <category>比赛总结</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>IDA动态调试APK</title>
    <url>/2021/10/02/ida-remote-android/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>夜神模拟器使用于调试32位的apk程序，因为apk为了安全很少将关键数据放在java层，所以这里通过动态调试以达到对native层的逆向。</p>
<span id="more"></span>
<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>ida与模拟器通过adb指令进行连接</p>
<h2 id="安装adb"><a href="#安装adb" class="headerlink" title="安装adb"></a>安装adb</h2><p>从<a href="https://developer.android.com/studio/releases/platform-tools.html下载adb，安装">https://developer.android.com/studio/releases/platform-tools.html下载adb，安装</a></p>
<p>找到目录中的adb.exe文件的路径，添加到patch</p>
<p>cmd窗口输入adb -version查看是否成功，出现版本号和命令帮助则成功</p>
<h2 id="adb连接"><a href="#adb连接" class="headerlink" title="adb连接"></a>adb连接</h2><h3 id="配置模拟器"><a href="#配置模拟器" class="headerlink" title="配置模拟器"></a>配置模拟器</h3><p>以下为夜神模拟器思路：</p>
<p>进入夜神模拟器设置，“关于平板电脑选项”，连续点击5次 “版本号” ，进入开发者模式</p>
<p>打开开发者模式中调试选项中的 ”USB调试“</p>
<p>—-<strong>模拟器配置完成</strong>—</p>
<h3 id="连接主机"><a href="#连接主机" class="headerlink" title="连接主机"></a>连接主机</h3><p>1.连接：cmd命令【adb connect 127.0.0.1:62001】</p>
<p>62001: 夜神模拟器的默认端口号，因模拟器而异</p>
<p>2.查看：cmd命令 【adb devices】；成功会显示出当前的连接，失败则显示“device not found”.</p>
<p>3.与ida建立关系：cmd命令 【adb push 路径\android_server /data/local/tmp/】</p>
<p>将ida安装目录中远程调试目录下的android_server文件push向模拟器，后者为push进模拟器的路径</p>
<p>4.进入模拟器：cmd命令 【adb shell】, 乱码不要在意，继续cmd命令 【su】,进入管理员模式</p>
<p>5.执行server文件：cmd命令 【cd /data/local/tmp/】,【ls】查看文件是否存在</p>
<p>【chmod 777 android_server】赋予文件777权限，【./android_server】执行文件，建立ida联系</p>
<p>6.端口转发：另外打开cmd，cmd命令 【adb forward tcp:23946  tcp:23946】</p>
<p><strong><em>常见异常</em></strong>：</p>
<p>1.执行文件时显示文件已经执行：命令【ps | grep android_server】寻找进程【kill -s 9 ID】关闭进程，然后重新执行</p>
<p>2.端口转发异常：(1)device not found：结束server文件执行，重新启动模拟器。（2）端口被占用：主机查看后酌情选择</p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>在模拟器中事先打开需要调试的文件</p>
<p>1.打开空白ida，或已经载入so文件的ida</p>
<p>2.空白ida：Debugger选项中的“attach”选项中的“Remote ARM……”选项</p>
<p>hostname选择填入“127.0.0.1”，端口默认，密码为空</p>
<p>2_1.已经载入so文件的ida：Debugger选项中的 “Select debugger” 选项中的“Remote ARM……”选项</p>
<p>然后 Debugger选项中 “process option” 选项，参数按需，hostname同上，端口，密码默认</p>
<p>3.选择进程：一般会在进程列表的底部找到目标程序的进程</p>
<p>连接完成，可以开始调试</p>
]]></content>
      <categories>
        <category>逆向工程学习</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>PEviewer</title>
    <url>/2021/09/26/PEviewer/</url>
    <content><![CDATA[<p>​    为了深入理解PE文件的结构，又参考多方资料，代码，思路，图片，讲解等等，用C语言写了一个简陋，不完善的PEviewer，代码如下，vscode运行不会报错</p>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">IMAGE_DOS_HEADER dosheader;<span class="comment">//Dos头</span></span><br><span class="line">IMAGE_FILE_HEADER fileheader;<span class="comment">//文件头</span></span><br><span class="line">IMAGE_SECTION_HEADER SectionHeader;<span class="comment">//节区头</span></span><br><span class="line">IMAGE_OPTIONAL_HEADER32 optionalheader;<span class="comment">//NT头里的可选头	</span></span><br><span class="line">IMAGE_IMPORT_DESCRIPTOR iid;<span class="comment">//IID</span></span><br><span class="line">DWORD PointerToPeHeader = <span class="number">0</span>;</span><br><span class="line">DWORD Size_Of_File = <span class="number">0</span>;</span><br><span class="line">DWORD Pe_Signature = <span class="number">0</span>;</span><br><span class="line">WORD Size_Of_Opt_Header = <span class="number">0</span>;</span><br><span class="line">WORD subsys = <span class="number">0</span>;</span><br><span class="line">DWORD Addr_of_EP = <span class="number">0</span>;</span><br><span class="line">DWORD PtrIdata = <span class="number">0</span>;</span><br><span class="line">DWORD ImageBase = <span class="number">0</span>;</span><br><span class="line">DWORD ImportsVA = <span class="number">0</span>;</span><br><span class="line">DWORD ImportsSize = <span class="number">0</span>;</span><br><span class="line">DWORD ImportDirAddr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> NrOfSections = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SectionInfo</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> VA;</span><br><span class="line">        <span class="keyword">int</span> VirtualSize;</span><br><span class="line">        <span class="keyword">int</span> SizeOfRAW;</span><br><span class="line">        <span class="keyword">int</span> Ptr2RAW;<span class="comment">//是一个文件偏移地址(FOA),该节区在硬盘文件中的地址</span></span><br><span class="line">	&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_section</span><span class="params">(struct SectionInfo *section_info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s节区:\n&quot;</span>, section_info-&gt;name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t装如内存虚拟空间后的地址（RVA） : 0x%x\n&quot;</span>, section_info-&gt;VA);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t该节区装入内存后的总大小: %d byte\n&quot;</span>, section_info-&gt;VirtualSize);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t该节区在硬盘文件中的地址(FOA) : 0x%x\n&quot;</span>, section_info-&gt;Ptr2RAW);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t该节区在硬盘上初始化数据的大小 : %d byte\n&quot;</span>, section_info-&gt;SizeOfRAW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[] = <span class="string">&quot;ty.exe&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请将测试文件与本程序放在同一目录下\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入文件名：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;测试文件%s\n&quot;</span>,name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-----------文件信息-----------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">    FILE* fp;</span><br><span class="line"></span><br><span class="line">    fp=fopen(name , <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//读取DOS头&quot;MZ&quot;</span></span><br><span class="line">    fseek(fp,<span class="number">0</span>,SEEK_SET);</span><br><span class="line">    fread(&amp;dosheader , <span class="number">1</span> , <span class="keyword">sizeof</span>(dosheader) , fp);<span class="comment">//从fp流里面读出&quot;MZ&quot;</span></span><br><span class="line">    WORD MZ=dosheader.e_magic;</span><br><span class="line">    <span class="keyword">if</span>(MZ != <span class="number">0x5a4d</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;这不是PE文件，或者你把DOS头删了\nfuck you\n&quot;</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PE文件的Dos头是：%x\n&quot;</span>,MZ);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;DOS结构体里面有两个重要成员：e_magic(MZ)  e_lfanew\n&quot;</span>);</span><br><span class="line">    WORD NToffset=dosheader.e_lfanew;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NT头的偏移 = 0x%x\n&quot;</span>,NToffset);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//寻找NT头</span></span><br><span class="line">    fseek(fp,NToffset,SEEK_SET);</span><br><span class="line">    fread(&amp;Pe_Signature,<span class="number">1</span>,<span class="keyword">sizeof</span>(Pe_Signature),fp);</span><br><span class="line">    WORD signature=Pe_Signature;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PE签名是：%x\n&quot;</span>,signature);</span><br><span class="line">    <span class="keyword">if</span>(signature != <span class="number">0x4550</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;你PE头呢？\nFuck you&quot;</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//文件头结构体</span></span><br><span class="line">    fread(&amp;fileheader,<span class="number">1</span>,<span class="keyword">sizeof</span>(fileheader),fp);</span><br><span class="line">    WORD m_code=fileheader.Machine;</span><br><span class="line">    <span class="keyword">if</span> (m_code==<span class="number">0x014c</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;该CPU是intel-386(X32)\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m_code==<span class="number">0x8664</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;该CPU是（X64）\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;谁知道你这是么cpu，自己百度去\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//节区数</span></span><br><span class="line">    <span class="keyword">if</span> (fileheader.NumberOfSections==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不可能有0个节区\n&quot;</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WORD section_num=fileheader.NumberOfSections;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件一共有%x个节区\n&quot;</span>,fileheader.NumberOfSections);</span><br><span class="line"><span class="comment">//可选头大小</span></span><br><span class="line">    WORD optional_header_size=fileheader.SizeOfOptionalHeader;</span><br><span class="line">    <span class="keyword">int</span> xbit=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (optional_header_size==<span class="number">0xE0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        xbit=<span class="number">32</span>;</span><br><span class="line">        <span class="comment">// pritnf(&quot;这是一个32位程序\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        xbit=<span class="number">64</span>;</span><br><span class="line">        <span class="comment">// printf(&quot;这是一个64位程序\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;可选头结构体的大小是：0x%x\n这是一个X%d程序\n&quot;</span>,optional_header_size,xbit);</span><br><span class="line"><span class="comment">//找到可选头</span></span><br><span class="line">    fread(&amp;optionalheader,<span class="number">1</span>,optional_header_size,fp);</span><br><span class="line">    </span><br><span class="line">    subsys=optionalheader.Subsystem;</span><br><span class="line">    <span class="keyword">if</span> (subsys==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;这是一个Windows GUI 子系统\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(subsys==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;这是一个Windows 控制台子系统\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;俺也不知道了，恁自己查吧\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    DWORD iid_addr=optionalheader.DataDirectory[<span class="number">1</span>].VirtualAddress;</span><br><span class="line">    DWORD iid_size=optionalheader.DataDirectory[<span class="number">1</span>].Size;</span><br><span class="line"></span><br><span class="line">    DWORD ope_addr=optionalheader.AddressOfEntryPoint;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;程序最先执行的代码的地址(RVA)是：0x%x&quot;</span>,ope_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;如果想要在一个可执行文件中附加了一段代码并且要让这段代码首先被执行，就可以通过更改入口地址到目标代码上，然后再跳转回原有的入口地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;就像upx压缩那样\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;代码节的起始地址：0x%x, &quot;</span>,optionalheader.BaseOfCode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数据节的起始地址：0x%x\n&quot;</span>,optionalheader.BaseOfData);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//打印出所有的节区</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SectionInfo</span> <span class="title">section_info</span>[<span class="title">section_num</span>];</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;section_num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fread(&amp;SectionHeader,<span class="number">1</span>,<span class="keyword">sizeof</span>(SectionHeader),fp);</span><br><span class="line">        <span class="built_in">memcpy</span>(section_info[i].name,SectionHeader.Name,<span class="number">10</span>);        </span><br><span class="line">        section_info[i].VA=SectionHeader.VirtualAddress;</span><br><span class="line">        section_info[i].VirtualSize=SectionHeader.Misc.VirtualSize;</span><br><span class="line">        <span class="comment">//这个成员指定了该节区装入内存后的总大小，以字节为单位</span></span><br><span class="line">        section_info[i].Ptr2RAW=SectionHeader.PointerToRawData;</span><br><span class="line">        print_section(&amp;section_info[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//RVA---&gt;RAW</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">RVA2RAW</span><span class="params">(<span class="keyword">int</span> rva)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,raw;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;section_num;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((rva&gt;=section_info[i].VA) &amp;&amp; (rva&lt;=(section_info[i].VA + section_info[i].VirtualSize)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//RAW = RVA - VA + PointerToRawData</span></span><br><span class="line">                raw = rva - section_info[i].VA + section_info[i].VirtualSize;</span><br><span class="line">                <span class="keyword">return</span> raw;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试打印出dll的名称</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;IID结构体的大小：%d\n&quot;</span>,iid_size);</span><br><span class="line">    <span class="keyword">int</span> IID_addr=RVA2RAW(iid_addr);</span><br><span class="line">    fseek(fp,IID_addr,SEEK_SET);</span><br><span class="line">    fread(&amp;iid,<span class="number">1</span>,<span class="number">20</span>,fp); <span class="comment">//read the first Import</span></span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(iid.Name!=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		fread(&amp;iid,<span class="number">1</span>,<span class="number">20</span>,fp);	</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	IMAGE_IMPORT_DESCRIPTOR Imported[count<span class="number">-1</span>];</span><br><span class="line">	fseek(fp, iid_addr, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// char *dll_name;</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(count<span class="number">-1</span>);i++)</span><br><span class="line">	&#123;</span><br><span class="line">		fread(&amp;Imported[i],<span class="number">1</span>,<span class="number">20</span>,fp);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;[%d] DLL文件的名称在地址 0x%lx 处。\n&quot;</span>, i, Imported[i].Name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//尝试获取dll的名称，失败</span></span><br><span class="line">        <span class="comment">// if (i==3)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     fseek(fp,Imported[i].Name,SEEK_SET);</span></span><br><span class="line">        <span class="comment">//     fread(&amp;name,1,10,fp);</span></span><br><span class="line">        <span class="comment">//     printf(&quot;--%s--\n&quot;,dll_name);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">	</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件用到的DLL：\n&quot;</span>);</span><br><span class="line"><span class="comment">// //尝试获取dll的名称，失败</span></span><br><span class="line"><span class="comment">//     DWORD DLL_NAME;</span></span><br><span class="line"><span class="comment">//     for(int i=0;i&lt;(count-1);i++)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         DLL_NAME = RVA2RAW(Imported[i].Name);//找出name的RAW</span></span><br><span class="line"><span class="comment">//         // DLL_NAME = Imported[i].Name;</span></span><br><span class="line"><span class="comment">//         fseek(fp , DLL_NAME , SEEK_SET);//定位文件</span></span><br><span class="line"><span class="comment">//         do</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             char c;</span></span><br><span class="line"><span class="comment">//             c = fgetc(fp);//按字节获取地址里的内容</span></span><br><span class="line"><span class="comment">//             if (c==0)//ascii字符串用0结尾</span></span><br><span class="line"><span class="comment">//             &#123;</span></span><br><span class="line"><span class="comment">//                 printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//                 break;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             printf(&quot;%c&quot;,c);</span></span><br><span class="line"><span class="comment">//         &#125; while (1);</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>该PEviewer能够准确的识别PE文件的位数，节区数等等，有些也不能准确识别，后期会不定期改进，先发上来，有意见和建议或者指出错误或者告诉我怎么识别dll名称的，欢迎联系我（QQ：MTYyMTA0Mzk4Ng==）</p>
]]></content>
      <categories>
        <category>逆向工程学习</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>读过的书</title>
    <url>/2021/09/12/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>daily</title>
    <url>/2021/09/12/daily/</url>
    <content><![CDATA[<p>​    人间最美好的，莫过于可以不受打扰，安心的干自己喜欢的事。</p>
]]></content>
      <categories>
        <category>悠哉日常</category>
      </categories>
      <tags>
        <tag>悠哉日常</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode环境配置</title>
    <url>/2021/09/07/VScode/</url>
    <content><![CDATA[<p> 最近发现dev c++喜欢报一些奇奇怪怪的错，所以这里将阵地转移到了Vscode，看看网上吹的是不是都是真的，记录一下配置的过程</p>
<span id="more"></span>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul>
<li>vscode这个软件</li>
<li>Windows下的这个gcc</li>
</ul>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="下载编译器："><a href="#下载编译器：" class="headerlink" title="下载编译器："></a>下载编译器：</h2><p>先下载gcc，安装，将其中的bin目录的地址给到path路径下，然后将include的路径也给到path</p>
<p><img src="VScode/image-20210907141602495.png" alt="image-20210907141602495" style="zoom:150%;" /></p>
<p>然后打开dos窗口输入【gcc -v】出现</p>
<p><img src="image-20210907141708826.png" alt="image-20210907141708826"></p>
<p>这些东西就说明安装好了</p>
<h2 id="配置VScode："><a href="#配置VScode：" class="headerlink" title="配置VScode："></a>配置VScode：</h2><p>打开vscode</p>
<p>1.首先在插件商店安装汉化插件，C语言插件，运行插件</p>
<p><img src="image-20210907142042232.png" alt="image-20210907142042232"></p>
<p>这样就完成了基本的配置，重启一下软件让他们生效</p>
<p>2.然后开始配置以些文件</p>
<ul>
<li><p>先进入一个文件夹，这里我新创建了一个</p>
</li>
<li><p>按快捷键Ctrl+Shift+P调出命令面板，输入”C/C++“，选择“Edit Configurations(UI)”进入配置。这里配置两个选项： - 编译器路径：D:/……/bin/gcc.exe【填写你自己的路径】</p>
</li>
<li>然后划到这一页最下面，找到###Sense模式，选则gcc-x64</li>
</ul>
<p>这时可以看到文件夹内生成了一个.vscode文件夹，里面有c_cpp_properties.json文件，打开之后会发现有自己的gcc.exe的目录，如果那个目录不是，需要人为改正</p>
<p>2.创建一个tasks.json文件来告诉VS Code如何构建（编译）程序。该任务将调用gcc编译器基于源代码创建可执行文件。 按快捷键Ctrl+Shift+P调出命令面板，输入tasks，选择“Tasks:Configure Default Build Task”：</p>
<p>再选“C/C++: g++.exe build active file”（可能前面的不一样，后面的几个英文对了就可以）</p>
<p>这时就会出现tasks.json文件，打开文件，看一下路径是否正确，不对就自己改改</p>
<p>3.配置调试文件GDB: 这里主要是为了在.vscode文件夹中产生一个launch.json文件，用来配置调试的相关信息。点击菜单栏的<em>Debug</em>—&gt;<em>Start Debugging</em>：</p>
<p>选择C++(GDB/LLDB)</p>
<p>这时可以看到生成了一个launch.json文件，这个文件就是关于调试用的</p>
<p>这里我采用了网上大神的代码，全部替换</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;g++.exe build active file&quot;</span>,<span class="comment">//调试前执行的任务，就是之前配置的tasks.json中的label字段</span></span><br><span class="line">            <span class="comment">//这里需要去查看一下，这个字段要统一，但是不一定是这一个</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,<span class="comment">//配置类型，只能为cppdbg</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,<span class="comment">//请求配置类型，可以为launch（启动）或attach（附加）</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,<span class="comment">//调试程序的路径名称</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],<span class="comment">//调试传递参数</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">true</span>,<span class="comment">//true显示外置的控制台窗口，false显示内置终端</span></span><br><span class="line">            <span class="comment">//弹不弹出新的dos窗口，网上说弹出会被说是小白</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;D:\\mingw-w64\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\mingw64\\bin\\gdb.exe&quot;</span>,</span><br><span class="line">            <span class="comment">//注意bin文件里面gdb的路径，写自己的</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="在终端运行："><a href="#在终端运行：" class="headerlink" title="在终端运行："></a>在终端运行：</h2><p>这样是为了防止code run插件出现乱码</p>
<ul>
<li>选择 文件 -&gt; 首选项 -&gt; 设置，打开 VS Code 设置页面，</li>
<li>找到 Run Code configuration，勾上 Run In Terminal 选项。</li>
<li>设置之后，代码就会在 Terminal 中运行即可。</li>
</ul>
<p>这时该文件夹就已经写好了，现在任意位置创建一个C语言文件，看能不能像dev一样方便</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在桌面新建了一个C文件，这里直接用vscode打开，写好程序</p>
<p><strong>先保存，不然会出错</strong></p>
<p>写完之后“Ctrl+Alt+N”开始运行</p>
<p><strong>每一次debug完事都要保存</strong></p>
<p><img src="image-20210907151430340.png" alt="image-20210907151430340"></p>
<p>这是没问题的，现在来开始调试一下</p>
<p><strong>需要注意的是这里的路径和文件名不能又中文，否则会调试失败</strong></p>
<p>将.vscode文件和需要调试的文件放在同一个目录下，然后用vscode打开这个目录，就可以调试了</p>
<p><img src="image-20210907154001133.png" alt="image-20210907154001133"></p>
<p>这时就基本完成了</p>
]]></content>
      <categories>
        <category>悠哉日常</category>
      </categories>
      <tags>
        <tag>悠哉日常</tag>
      </tags>
  </entry>
  <entry>
    <title>注册谷歌</title>
    <url>/2021/09/04/signgoogle/</url>
    <content><![CDATA[<p>主要为了解决在注册时手机号无法使用的问题</p>
<p>This phone number cannot be used for verification.</p>
<span id="more"></span>
<h1 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h1><p>1.这里以采用香港节点为例</p>
<p>2.将注册界面的语言设置为繁体字</p>
<h1 id="开始注册："><a href="#开始注册：" class="headerlink" title="开始注册："></a>开始注册：</h1><p>按照步骤来就可以了，电话就可以用你的了，注意国旗还是要大陆的</p>
<p><strong><em>Ps:</em></strong></p>
<ul>
<li><p>这里注意的是要将浏览器界面的语言设置成符合自己所用节点的语言，可能会更顺利一些</p>
</li>
<li><p>一次不行，不要频繁尝试，等一会再试，否则容易误判</p>
</li>
<li><strong>科学上网，请遵守法律法规</strong></li>
</ul>
]]></content>
      <categories>
        <category>悠哉日常</category>
      </categories>
      <tags>
        <tag>你好，世界</tag>
      </tags>
  </entry>
  <entry>
    <title>纪念一下</title>
    <url>/2021/09/02/%E7%BA%AA%E5%BF%B5%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[<p>​    纪念一下<strong><em>2021-09-02 23:34:04</em></strong>，BUU的逆向第二页圆满完成</p>
]]></content>
      <categories>
        <category>逆向工程学习</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>江苏省赛2021题解</title>
    <url>/2021/09/01/%E6%B1%9F%E8%8B%8F%E7%9C%81%E8%B5%9B2021%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="2021领航杯APK逆向"><a href="#2021领航杯APK逆向" class="headerlink" title="2021领航杯APK逆向"></a>2021领航杯APK逆向</h1><p>没见过这么急促、简陋的比赛</p>
<span id="more"></span>
<p>言归正传</p>
<h2 id="本题反思："><a href="#本题反思：" class="headerlink" title="本题反思："></a>本题反思：</h2><p>反码，补码这些要会算，不能只会正数，负数也要会。</p>
<p>基础不牢啊，这道题如果算对了-16的二进制码就出了，300分可惜可惜</p>
<p>题目简单，但还是要以此为戒增强基础</p>
<p>一定要明白运算的含义，不能马虎</p>
<h2 id="知识提要："><a href="#知识提要：" class="headerlink" title="知识提要："></a>知识提要：</h2><p>APK文件要了解的基础</p>
<ul>
<li>每一个apk文件都是可以解压的</li>
</ul>
<p>解压之后一般会出现以下文件（纯APK，无添加别的引擎）</p>
<h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><p>该文件是每个应用都必须定义和包含的，它描述了应用的名字、版本、权限、引用的库文件等等信息</p>
<h3 id="META-INF目录"><a href="#META-INF目录" class="headerlink" title="META-INF目录"></a>META-INF目录</h3><p>1.META-INF目录下存放的是签名信息，用来保证apk包的完整性和系统的安全</p>
<p>2.保证了apk包里的文件不能被随意替换。如果想要替换里面的一幅图片，一段代码， 或一段版权信息，想直接解压缩、替换再重新打包，基本是不可能的。</p>
<p>3.软件修改后需要将里面的证书文件删除（.RSA、.SF、.MF三个文件）再重新签名，否则软件无法安装</p>
<h3 id="res目录"><a href="#res目录" class="headerlink" title="res目录"></a>res目录</h3><p>1.res目录存放资源文件。包括图片，字符串等等。</p>
<p>2.res文件夹里存放的大部分是软件所需的资源及布局文件（drawable存放资源、layout、xml存放布局文件.xml），部分需要汉化的单词、语句会在这些.xml文件里</p>
<h3 id="lib目录"><a href="#lib目录" class="headerlink" title="lib目录"></a>lib目录</h3><p>存放一些so文件，有的可能没有</p>
<h3 id="assets目录"><a href="#assets目录" class="headerlink" title="assets目录"></a>assets目录</h3><p>存放一些配置文件，这些文件的内容在程序运行过程中可以通过相关的API获得</p>
<h3 id="classes-dex文件"><a href="#classes-dex文件" class="headerlink" title="classes.dex文件"></a>classes.dex文件</h3><p>classes.dex是java源码编译后生成的java字节码文件（比如这个题就可以直接分析这个文件）</p>
<h3 id="resources-arsc"><a href="#resources-arsc" class="headerlink" title="resources.arsc"></a>resources.arsc</h3><p>编译后的二进制资源文件。resources.arsc文件是编译后的资源文件，大多数情况下，需要汉化的单词、语句绝大多数都在这个文件里，<strong>汉化</strong>的时候首先就要看这个文件。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这类简单apk首先就需要找到MainActive函数，这里我直接将class.dex文件用jadx打开了，不要管androidx开头的文件和google开头的文件，找最不一样的、出现次数最少的文件</p>
<p><img src="image-20210901225721143.png" alt="image-20210901225721143"></p>
<p>这里轻松获得源码</p>
<p>看到最下面，找到关键判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (check.m39check_final_GBYM_sE(r1)) </span><br><span class="line">&#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0.</span><span class="keyword">this</span>$<span class="number">0.</span>getApplicationContext(),<span class="string">&quot;Rightflag!&quot;</span>,<span class="number">0</span>).show();</span><br><span class="line">&#125; <span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0.</span><span class="keyword">this</span>$<span class="number">0.</span>getApplicationContext(), <span class="string">&quot;Wrong flag!&quot;</span>, <span class="number">0</span>).show()    &#125;</span><br></pre></td></tr></table></figure>
<p>这里需要知道参数的含义</p>
<p>判断关键的“r1”就是由函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">check.m40enc_Fz0kQmc(substring, r4, r1);</span><br></pre></td></tr></table></figure>
<p>得到的</p>
<p>该函数的三个参数很分析得到就是</p>
<p>输入的flag中间的内容；从一个文件中读取的几个字符；一个空字符</p>
<p>跳到这个函数的定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">m40enc_Fz0kQmc</span><span class="params">(String str, <span class="keyword">byte</span>[] bArr, <span class="keyword">byte</span>[] bArr2)</span> </span>&#123;</span><br><span class="line">     Intrinsics.checkNotNullParameter(str, <span class="string">&quot;input&quot;</span>);</span><br><span class="line">     Intrinsics.checkNotNullParameter(bArr, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">     Intrinsics.checkNotNullParameter(bArr2, <span class="string">&quot;enc&quot;</span>);</span><br><span class="line">     <span class="keyword">byte</span>[] r0 = UByteArray.m107constructorimpl(<span class="number">36</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">35</span>; i++) &#123;</span><br><span class="line">         UByteArray.m118setVurrAj0(r0, i, UByte.m64constructorimpl((<span class="keyword">byte</span>) (str.charAt(i) ^ i)));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt;= <span class="number">35</span>; i2++) &#123;</span><br><span class="line">         UByteArray.m118setVurrAj0(bArr2, i2, UByte.m64constructorimpl((<span class="keyword">byte</span>) (UByteArray.m113getw2LRezQ(r0, <span class="number">35</span> - i2) ^ UByteArray.m113getw2LRezQ(bArr, i2 % <span class="number">16</span>))));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i3 = <span class="number">0</span>; i3 &lt;= <span class="number">35</span>; i3++) &#123;</span><br><span class="line">         <span class="keyword">byte</span> b = UByteArray.m113getw2LRezQ(bArr2, i3);</span><br><span class="line">         UByteArray.m118setVurrAj0(bArr2, i3, UByte.m64constructorimpl((<span class="keyword">byte</span>) UnsignedUtils.m361uintDivideJ1ME1BU(UInt.m132constructorimpl(UByte.m64constructorimpl((<span class="keyword">byte</span>) (UByteArray.m113getw2LRezQ(bArr2, i3) &amp; -<span class="number">16</span>)) &amp; UByte.MAX_VALUE), <span class="number">16</span>)));</span><br><span class="line">         UByteArray.m118setVurrAj0(bArr2, i3 + <span class="number">36</span>, UByte.m64constructorimpl((<span class="keyword">byte</span>) (b &amp; <span class="number">15</span>)));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看到主函数判断的函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">m39check_final_GBYM_sE</span><span class="params">(<span class="keyword">byte</span>[] bArr)</span> </span>&#123;</span><br><span class="line">    Intrinsics.checkNotNullParameter(bArr, <span class="string">&quot;enc&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">71</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;abcdefgh13462579&quot;</span>.charAt(UByteArray.m113getw2LRezQ(bArr, i) &amp; UByte.MAX_VALUE) != <span class="string">&quot;ccccebeebbeafbeeeabefabfaffffafaafaaea4b292he31922g6d54a62hchf2bb9ehagdc&quot;</span>.charAt(i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据这个函数，可以直接求出r1的值（判断里的参数），但是这里需要注意的是，jadx不会对参数进行重命名，所以会出现参数名重复的现象，大坑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string_2=<span class="string">&quot;ccccebeebbeafbeeeabefabfaffffafaafaaea4b292he31922g6d54a62hchf2bb9ehagdc&quot;</span></span><br><span class="line">string_1=<span class="string">&quot;abcdefgh13462579&quot;</span></span><br><span class="line">bArr=<span class="string">&#x27;123456789getflag&#x27;</span></span><br><span class="line"></span><br><span class="line">barr2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string_2)):</span><br><span class="line">    barr2.append((string_1.index(string_2[i]))&amp;<span class="number">255</span>)</span><br><span class="line">barr2_0=[]</span><br><span class="line"><span class="built_in">print</span>(barr2)</span><br><span class="line"><span class="comment"># print(barr2_0)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    barr2_0.append(barr2[i]*<span class="number">16</span>+barr2[i+<span class="number">36</span>])</span><br></pre></td></tr></table></figure>
<p>得到r1，也就是上面函数bArr2参数</p>
<p>这样就可以求出flag了，三个循环，第一个第二个没啥好分析的，直接逆向就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前两个循环</span></span><br><span class="line">r0=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    r0[<span class="number">35</span>-i]=barr2_0[i]^<span class="built_in">ord</span>(bArr[i%<span class="number">16</span>])</span><br><span class="line"><span class="built_in">print</span>(r0)</span><br><span class="line"></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    flag.append(<span class="built_in">chr</span>(r0[i]^i))</span><br></pre></td></tr></table></figure>
<p>看到第三个循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i3 = <span class="number">0</span>; i3 &lt;= <span class="number">35</span>; i3++) &#123;</span><br><span class="line">    byte b = UByteArray.m113getw2LRezQ(bArr2, i3);</span><br><span class="line"><span class="comment">#这里首先把数组里的i位保存给b了</span></span><br><span class="line">    UByteArray.m118setVurrAj0(bArr2, i3, UByte.m64constructorimpl((byte) UnsignedUtils.m361uintDivideJ1ME1BU(UInt.m132constructorimpl(UByte.m64constructorimpl((byte) (UByteArray.m113getw2LRezQ(bArr2, i3) &amp; -<span class="number">16</span>)) &amp; UByte.MAX_VALUE), <span class="number">16</span>)));</span><br><span class="line"><span class="comment">#这里可以简化的看成i位&amp;-16之后又÷16</span></span><br><span class="line">    <span class="comment">#-16的二进制表示是：1111 1111 0000，这里可以看作是保留了这个第i位的前4位</span></span><br><span class="line">           UByteArray.m118setVurrAj0(bArr2, i3 + <span class="number">36</span>, UByte.m64constructorimpl((byte) (b &amp; <span class="number">15</span>)));</span><br><span class="line">    <span class="comment">#15的二进制是：1111，这就是保留后四位</span></span><br><span class="line">    <span class="comment">#总体来看就是将第i位拆开来算了，大坑啊我日</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>这段加密的大体意思就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov EAX, [ESP+I]</span><br><span class="line">and [ESP+I], FFFFFFF0</span><br><span class="line">sal [ESP+I], 4	</span><br><span class="line">and EAX, 1111</span><br><span class="line">mov [ESP+I+0x24], EAX</span><br></pre></td></tr></table></figure>
<p>看似对对称的两个数进行操作，实际上还是一个数，给出脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    barr2_0.append(barr2[i]*<span class="number">16</span>+barr2[i+<span class="number">36</span>])</span><br></pre></td></tr></table></figure>
<p>组合起来就是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">string_2=&quot;ccccebeebbeafbeeeabefabfaffffafaafaaea4b292he31922g6d54a62hchf2bb9ehagdc&quot;</span><br><span class="line">string_1=&quot;abcdefgh13462579&quot;</span><br><span class="line">bArr=&#x27;123456789getflag&#x27;</span><br><span class="line"></span><br><span class="line">barr2=[]</span><br><span class="line">for i in range(len(string_2)):</span><br><span class="line">    barr2.append((string_1.index(string_2[i]))&amp;255)</span><br><span class="line">barr2_0=[]</span><br><span class="line">print(barr2)</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(barr2_0)</span></span><br><span class="line">for i in range(36):</span><br><span class="line">    barr2_0.append(barr2[i]*16+barr2[i+36])</span><br><span class="line"></span><br><span class="line">r0=[0 for i in range(36)]</span><br><span class="line">for i in range(36):</span><br><span class="line">    r0[35-i]=barr2_0[i]^ord(bArr[i%16])</span><br><span class="line">print(r0)</span><br><span class="line"></span><br><span class="line">flag=[]</span><br><span class="line">for i in range(36):</span><br><span class="line">    flag.append(chr(r0[i]^i))</span><br><span class="line">print(&#x27;&#x27;.join(flag))</span><br></pre></td></tr></table></figure>
<h2 id="APK例外"><a href="#APK例外" class="headerlink" title="APK例外"></a>APK例外</h2><p>也不算是例外，只是我觉得是例外，我做的题太少了……</p>
<p>apk游戏，buu的PixelShooter</p>
<p>这是一个由unity引擎支持的一个打飞机游戏，他的flag存在于</p>
<p>assets\bin\Data\Managed目录下的</p>
<p><strong>Assembly-CSharp.dll</strong>文件中</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程学习-PE文件格式</title>
    <url>/2021/08/31/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%AD%A6%E4%B9%A0-PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="PE文件格式"><a href="#PE文件格式" class="headerlink" title="PE文件格式"></a>PE文件格式</h1><h2 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h2><p>PE文件是windows操作系统下的可执行文件的统称，一般指的是32位文件，64位文件称为【PE32+】</p>
<span id="more"></span>
<h2 id="文件种类："><a href="#文件种类：" class="headerlink" title="文件种类："></a>文件种类：</h2><div class="table-container">
<table>
<thead>
<tr>
<th>种类</th>
<th>文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>可执行文件</td>
<td>EXE, SCR</td>
</tr>
<tr>
<td>库系列文件</td>
<td>DLL, OCX, CPL, DRV</td>
</tr>
<tr>
<td>驱动程序</td>
<td>SYS, VXD</td>
</tr>
<tr>
<td>对象文件</td>
<td>OBJ</td>
</tr>
</tbody>
</table>
</div>
<h2 id="PE文件基本结构："><a href="#PE文件基本结构：" class="headerlink" title="PE文件基本结构："></a>PE文件基本结构：</h2><h3 id="文件组成"><a href="#文件组成" class="headerlink" title="文件组成"></a>文件组成</h3><p>PE头+PE体</p>
<p>PE头：DOS头；DOS存根；NT头；节区头【text（代码）；data（数据）；rsrc（资源）】</p>
<p>PE头与各节区的尾部存在一个【NULL填充】区域：</p>
<p><img src="image-20210831160207999.png" alt="image-20210831160207999" style="zoom:150%;" /></p>
<h3 id="VA-amp-RVA"><a href="#VA-amp-RVA" class="headerlink" title="VA  &amp;  RVA:"></a>VA  &amp;  RVA:</h3><p>1.VA：进程虚拟内存的绝对地址</p>
<p>2.RVA：从某个基准位置开始的相对地址</p>
<p>（虚拟内存：在32位的Windows中，各个进程分配4GB的虚拟内存，所以VA的范围【00000000~ffffffff】）</p>
<script type="math/tex; mode=display">
RVA + ImageBase = VA</script><p>PE内部信息大多数以RVA形式存在，这样方便地址重定位</p>
<h2 id="PE头："><a href="#PE头：" class="headerlink" title="PE头："></a>PE头：</h2><h3 id="DOS头"><a href="#DOS头" class="headerlink" title="DOS头"></a>DOS头</h3><p>1.起源：微软在创建PE文件时，DOS广泛使用，所以在PE头前面加了一个<strong>IMAGE_DOS_HEADER</strong>结构体，内容如下。</p>
<p><img src="image-20210831162112162.png" alt="image-20210831162112162"></p>
<p>2.结构体大小共64字节，有两个重要成员【e_magic   &amp;   e_lfanew】。</p>
<p>e_magic：DOS签名，对应的是字符===&gt;”MZ”</p>
<p>e_lfanew：指示NT头的偏移，不同的文件值也不一样。</p>
<p><img src="image-20210831162156817.png" alt="image-20210831162156817"></p>
<p>这里看出最后就是e_lfanew的值是 00 00 00 B0（小端序）</p>
<h4 id="DOS存根"><a href="#DOS存根" class="headerlink" title="DOS存根"></a>DOS存根</h4><p>在dos头下面，大小不固定，有没有都行，由代码和数据混合而成</p>
<p><img src="image-20210708191640915.png" alt="image-20210708191640915"></p>
<p>代码的作用就是在你用DOS运行时出现后面那句话</p>
<h3 id="NT头（IMAGE-NT-HEADER）"><a href="#NT头（IMAGE-NT-HEADER）" class="headerlink" title="NT头（IMAGE_NT_HEADER）"></a>NT头（IMAGE_NT_HEADER）</h3><p>NT头又名”文件头“，是表现文件大致属性的“IMAGE_NT_HEADER”结构体</p>
<p>内涵3个成员，总共大小为0xF8:(根据DOS头指出的偏移可以找到)</p>
<p><img src="image-20210831163457833.png" alt="image-20210831163457833"></p>
<p><img src="image-20210831163317838.png" alt="image-20210831163317838"></p>
<p>第一个成员是<strong>签名结构体</strong>：值为【50 45 00 00】=====&gt;’PE‘</p>
<p>第二个成员是<strong>文件头结构体</strong>===&gt;IMAGE_FILE_HEADER</p>
<p>第三个成员是<strong>可选头结构体</strong>===&gt;IMAGE_OPTIONAL_HEADER</p>
<h4 id="文件头结构体（IMAGE-FILE-HEADER）"><a href="#文件头结构体（IMAGE-FILE-HEADER）" class="headerlink" title="文件头结构体（IMAGE_FILE_HEADER）"></a>文件头结构体（IMAGE_FILE_HEADER）</h4><p>表现文件大致属性 IMAGE_FILE_HEADER结构体</p>
<p><img src="image-20210831163600312.png" alt="image-20210831163600312"></p>
<p><img src="逆向工程学习-PE文件结构/image-20210831165137520.png" alt="image-20210831165137520"></p>
<p>对应着如下结构体</p>
<p><img src="image-20210831171701776.png" alt="image-20210831171701776"></p>
<p>内涵四个重要成员：Machine，NumberOfSections，SizeOfOptionalHeader，Characteristics</p>
<p>（程序能否运行的关键）</p>
<ul>
<li><p>Machine：每个CPU都有唯一的Machine码</p>
<p><img src="image-20210831163725281.png" alt="image-20210831163725281"></p>
</li>
</ul>
<p>这里看到我的CPU对应的机器码是：0x014C</p>
<ul>
<li>NumberOfSections</li>
</ul>
<p>指出文件中存在节区的数量，一定要大于零。定义与实际不符会运行失败</p>
<p>看上图知道应该是”05“</p>
<ul>
<li>SizeOfOptionalHeader</li>
</ul>
<p>指出NT结构体最后一个成员【IMAGE_OPTIONAL_HEADER32】的结构体长度，64位和32位不同。</p>
<ul>
<li>Characerristics</li>
</ul>
<p>用于标记文件属性。即文件是否是可运行状态，是否是DLL文件等信息，通过bit OR形式组合起来。</p>
<p><img src="image-20210831164610110.png" alt="image-20210831164610110"></p>
<p>注：Characteristics的值有可能是【0002h】（不可执行），比如obj文件和resource DLL文件。</p>
<p>这里SYS文件时0x1000</p>
<p>可用于区分不同的文件类型</p>
<h4 id="可选头结构体（IMAGE-OPTIONAL-HEADER32）"><a href="#可选头结构体（IMAGE-OPTIONAL-HEADER32）" class="headerlink" title="可选头结构体（IMAGE_OPTIONAL_HEADER32）"></a>可选头结构体（IMAGE_OPTIONAL_HEADER32）</h4><p>特点：PE头结构体中最大的结构体：</p>
<p><img src="image-20210831165328723.png" alt="image-20210831165328723"></p>
<p>关键成员，出错文件将无法运行：Magic，AddressOfEntryPoint，ImageBase，SectionAlignment，FileAlignment。</p>
<p><img src="image-20210831165536267.png" alt="image-20210831165536267"></p>
<p>对应着如下节选的结构体</p>
<p><img src="image-20210831171800697.png" alt="image-20210831171800697"></p>
<ul>
<li>Magic：在32位中，Magic码是10B，64位是20B；这里显然是一个32位程序</li>
<li><p>AddressOfEntryPoint：拥有EP和RVA的值，该值指出程序最先执行的代码起始地址</p>
</li>
<li><p>ImageBase：当PE文件装入内存时，指出文件  的优先装入地址</p>
<p>Tips：EXE,DLL文件一般装载到用户内存的0~7fffffff中，SYS文件载入内核内存的80000000~ffffffff里；在执行PE文件时，PE装载器事先创建进程，文件载入内存，设置EIP的值为</p>
</li>
</ul>
<ul>
<li><p>SectionAlignment，FileAlignment：PE文件的PE体部分划分不同区节，存储着不同类别的数据，FileAlignment指定了节区在磁盘文件中的最小单位；SectionAlignment指定了节区在内存中的最小单位；在一个文件中，二者的值不一定相等，但是节区的大小必然是SectionAlignment或FileAlignment的整倍数。</p>
</li>
<li><p>SizeOfImage：指定了PE Image在虚拟内存中所占的大小</p>
</li>
<li>SizeOfHEADER：指出整个PE头的大小，该值一定是FileAlignment值的整数倍。第一节区所在位置与SizeOfHEADER距离文件开始的偏移量相同</li>
<li>Subsystem：该值用来区分系统驱动文件和普通的可执行文件。</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Driver文件</td>
<td>系统驱动（如：ntfs.sys）</td>
</tr>
<tr>
<td>2</td>
<td>GUI文件</td>
<td>窗口应用程序（如：记事本.exe）</td>
</tr>
<tr>
<td>3</td>
<td>GUI文件</td>
<td>控制台应用程序（如：CMD.EXE)</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>NumberOfRvaAndSizes：指定结构体：IMAGE_OPTIONAL_HEADER32最后一个成员数组的个数，虽然明确指出时16，但是也不一定</li>
<li>DataDirection：IMAGE_OPTIONAL_HEADER32最后一个成员；由IMAGE_DATA_DIRECTORY结构体构成的数组，每一项都有被定义的值：</li>
</ul>
<p><img src="image-20210831171409417.png" alt="image-20210831171409417"></p>
<h3 id="节区头（IMAGE-SECTION-HEADER）"><a href="#节区头（IMAGE-SECTION-HEADER）" class="headerlink" title="节区头（IMAGE_SECTION_HEADER）"></a>节区头（IMAGE_SECTION_HEADER）</h3><p>组成：由IMAGE_SECTION_HEADER结构体组成的数组，每个结构体对应一个节区。</p>
<p>作用：定义了各节区的属性</p>
<p><img src="image-20210831172859859.png" alt="image-20210831172859859"></p>
<p>结构体：</p>
<p><img src="image-20210831172237863.png" alt="image-20210831172237863"></p>
<p>重要成员：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>项目</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>VirtualSize</td>
<td>内存中节区所占大小</td>
</tr>
<tr>
<td>VirtualAddress</td>
<td>内存中节区起始地址</td>
</tr>
<tr>
<td>SizeOfRawData</td>
<td>硬盘中节区所占大小</td>
</tr>
<tr>
<td>PointerToRawData</td>
<td>硬盘中节区起始地址</td>
</tr>
<tr>
<td>Characteristics</td>
<td>节区属性</td>
</tr>
</tbody>
</table>
</div>
<p>Tips：VA和PointerToRawData不带有任何值，分别由IMAGE_OPTIONAL_HEADER32结构体中的SectionAlignment和FileAlignment定义；SizeOfRawData和VirtualSize的值一般不同</p>
<p>Characteristic由以下的值组合而成：</p>
<p><img src="image-20210831172929874.png" alt="image-20210831172929874"></p>
<p>Ps:当PE文件加载到内存时，不是原封不动的加载，而是根据节区头中定义的节区起始地址，节区大小等加载，所以在磁盘里的PE文件和在内存中的PE文件具有不同的形态，这一过程称为“映像”（image）</p>
<h1 id="RVA-to-RAW"><a href="#RVA-to-RAW" class="headerlink" title="RVA to RAW"></a>RVA to RAW</h1><h2 id="是什么："><a href="#是什么：" class="headerlink" title="是什么："></a>是什么：</h2><p>PE文件加载到内存时，每个节区都要能准确完成<strong>内存地址</strong>与<strong>文件偏移</strong>间的映射。这一过程称为RVA   to   RAW（文件偏移）。</p>
<h2 id="计算方法："><a href="#计算方法：" class="headerlink" title="计算方法："></a>计算方法：</h2><p>公式：</p>
<ul>
<li><p>RAW-PointerToRawData=RVA-VA</p>
</li>
<li><p>RAW=RVA-VA+PointerToRawData</p>
</li>
</ul>
<p>例题：</p>
<p><img src="image-20210708205117927.png" alt="image-20210708205117927"></p>
<p>1.当RAV（相对地址）= 5000时，File Offset = ？</p>
<p>已知RAV=5000在.text节区，且ImageBase=01000000，根据</p>
<ul>
<li>RAW=RVA-VA+PointerToRawData</li>
</ul>
<p>RAW=5000-1000+400=4400</p>
<h1 id="IAT（Import-Address-Tables）"><a href="#IAT（Import-Address-Tables）" class="headerlink" title="IAT（Import_Address_Tables）"></a>IAT（Import_Address_Tables）</h1><h2 id="介绍：-1"><a href="#介绍：-1" class="headerlink" title="介绍："></a>介绍：</h2><p>IAT：Import_Address_Tables,导入地址表）是一个用来记录程序正在使用哪些库里的哪些函数的表格</p>
<h2 id="DLL（动态链接库）："><a href="#DLL（动态链接库）：" class="headerlink" title="DLL（动态链接库）："></a>DLL（动态链接库）：</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>1.不需要把库包含到程序中（C语言就需要提前导入库），需要时调用即可。</p>
<p>2.可以在多个进程中共享。</p>
<p>3.更新库时只需要替换相关的DLL文件。</p>
<h3 id="加载方式："><a href="#加载方式：" class="headerlink" title="加载方式："></a>加载方式：</h3><p>1.显示链接：程序使用时加载，使用完毕后释放内存。</p>
<p>2.隐式链接：程序开始时一同加载DLL，程序终止时释放内存。（IAT提供的机制与隐式链接有关）</p>
<h2 id="IMAGE-IMPORT-DESCRIPTOR（IID）"><a href="#IMAGE-IMPORT-DESCRIPTOR（IID）" class="headerlink" title="IMAGE_IMPORT_DESCRIPTOR（IID）:"></a>IMAGE_IMPORT_DESCRIPTOR（IID）:</h2><p>也被称为IMPORT Directory Table</p>
<p>该结构体记录着PE文件要导入哪些库文件。（Import：导入，向库提供服务（函数）；Export：导出，由库向PE文件提供服务（函数））</p>
<p><img src="image-20210831174510190.png" alt="image-20210831174510190"></p>
<p>1.执行一个程序需要许多库，导入多少库，就有多少这种结构体，这些结构体构成一个<strong>数组</strong>，该数组以NULL结构体结束。</p>
<p>2.重要成员：OriginalFirstThunk: 是INT的地址（RVA），Name：库名称字符串的地址（RVA），FirstThunk：IAT的地址 RVA。</p>
<ul>
<li>INT===&gt;IMPORT NAME TABLE；IAT===&gt;IMPORE ADDRESS TABLE（table：数组）</li>
<li>INT与IAT是长整型数组，以NULL结束</li>
<li>INT中个元素的值为IMAGE_IMPORT_BY_NAME结构体指针</li>
<li>INT IAT大小应相同</li>
</ul>
<p><img src="image-20210831175012865.png" alt="image-20210831175012865"></p>
<p>PE装载器把导入函数输入至IAT的顺序</p>
<p><img src="逆向工程学习-PE文件结构/image-20210831175304097.png" alt="image-20210831175304097"></p>
<h3 id="尝试找到IID结构体"><a href="#尝试找到IID结构体" class="headerlink" title="尝试找到IID结构体"></a>尝试找到IID结构体</h3><p>1.该结构体不在PE头中，他存在于PE体中，但是他的位置在PE头中</p>
<p>2.位于：IMAGE_OPTIONAL_HEADER32.DataDirectory[1].VritualAddress；这便是结构体的起始地址</p>
<h1 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h1><h2 id="介绍：-2"><a href="#介绍：-2" class="headerlink" title="介绍："></a>介绍：</h2><p>1.EAT是一种核心机制，可以让不同的程序调用库提供的函数。只用通过EAT才能准确求得从相应库中导出函数的起始地址。</p>
<p>2.PE文件特有的结构体image_export_DIRECTORY保存着导出信息。并且PE文件中仅有<strong>一个</strong>用来说明库EAT的结构体</p>
<p>【用来说明IAT的结构体IMAGE_IMPORT_DESCRIPTOR以数组的形式存在，拥有多个成员，这样PE文件可以同时导入多个库】</p>
<h2 id="IMAGE-EXPORT-DIRECTORY："><a href="#IMAGE-EXPORT-DIRECTORY：" class="headerlink" title="IMAGE_EXPORT_DIRECTORY："></a>IMAGE_EXPORT_DIRECTORY：</h2><p>结构体如下</p>
<p><img src="image-20210831180851274.png" alt="image-20210831180851274"></p>
<p>重要成员：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>项目</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>NumberOfFunctions</td>
<td>实际的Export函数的个数</td>
</tr>
<tr>
<td>NumberOfNames</td>
<td>Export函数中具名的函数个数</td>
</tr>
<tr>
<td>AddressOfFunctions</td>
<td>Export函数地址数组（元素个数等于表中第一个项目）</td>
</tr>
<tr>
<td>AddressOfNames</td>
<td>函数名称的地址数组（元素个数等于表中第二个项目）</td>
</tr>
<tr>
<td>AddressOfNameOrdinals</td>
<td>Ordinal地址数组（元素个数等于表中第二个项目）</td>
</tr>
</tbody>
</table>
</div>
<p>Ordinals：导出函数的固有编号。因为有的函数没有函数名，只有一个编号</p>
<p><img src="image-20210831204013551.png" alt="image-20210831204013551"></p>
<h2 id="GetProcAddress"><a href="#GetProcAddress" class="headerlink" title="GetProcAddress():"></a>GetProcAddress():</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从库中获得函数地址，该API引用EAT来获取指定的API的地址</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过引用EAT来获取指定API的地址</p>
<p><img src="image-20210831181112965.png" alt="image-20210831181112965"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.PE规范只是一种规范，仅此而已。</p>
<p>2.PE头并非一成不变，而是灵活度极高。</p>
]]></content>
      <categories>
        <category>逆向工程学习</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程学习-基础篇</title>
    <url>/2021/08/31/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h1 id="逆向工程学习-基础1"><a href="#逆向工程学习-基础1" class="headerlink" title="逆向工程学习-基础1"></a>逆向工程学习-基础1</h1><span id="more"></span>
<p><a href="http://www.baidu.com">http://www.baidu.com</a></p>
<h2 id="字节序："><a href="#字节序：" class="headerlink" title="字节序："></a>字节序：</h2><h3 id="1-小端序"><a href="#1-小端序" class="headerlink" title="1.小端序"></a>1.小端序</h3><p>1.当一个数据只有一个字节时，大小端序都一样</p>
<p>2.地址高位存储数据的高位，人眼看来是逆序存储</p>
<p><img src="image-20210831121649274.png" alt="image-20210831121649274"></p>
<h3 id="2-大端序"><a href="#2-大端序" class="headerlink" title="2.大端序"></a>2.大端序</h3><p>1.地址低位存储数据高位，人眼看起来是正常的</p>
<p>2.应用于大型服务器和risc系列的CPU。</p>
<h3 id="另外："><a href="#另外：" class="headerlink" title="另外："></a>另外：</h3><p>【字符数组】在内存中是连续的，无论大小端序，储存顺序相同</p>
<h2 id="寄存器："><a href="#寄存器：" class="headerlink" title="寄存器："></a>寄存器：</h2><h3 id="基本程序运行寄存器"><a href="#基本程序运行寄存器" class="headerlink" title="基本程序运行寄存器"></a>基本程序运行寄存器</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寄存器类型</th>
<th>寄存器名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>通用寄存器</td>
<td>eax, ebx, ecx, edx, esi, edi, ebp, esp</td>
</tr>
<tr>
<td>段寄存器</td>
<td>cs, ds, ss, es, fs, gs</td>
</tr>
<tr>
<td>程序状态与控制寄存器</td>
<td>EFLAGS</td>
</tr>
<tr>
<td>指令指针寄存器</td>
<td>EIP</td>
</tr>
</tbody>
</table>
</div>
<h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>ESP（栈顶指针）:指示栈区域的栈顶地址。</p>
<p>EBP（栈帧指针）:表示栈区域的基地址，函数被调用时，保存ESP的的值，函数返回时再将值还给ESP，以保证栈不会崩溃（栈帧技术）。</p>
<p>ESI,EDI：这两个寄存器与特定指令（LODS, STOP, REP, MOVS等）一起使用时，主要用于内存复制（例：upx解压缩时恢复upx0节区）</p>
<h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><p>1.什么是段：是一种将内存划分为多个区段的内存保护技术，与分页技术一起将虚拟内存变为实际物理内存。段内存记录在Segment Deskcriptor Table(SDT)段描述表中，段寄存器持有这些SDT的索引</p>
<p><img src="image-20210831140543512.png" alt="image-20210831140543512"></p>
<p>每个段寄存器指向的段描述符结合虚拟内存，形成一个线性地址，在借助分页技术，线性地址转化为实际的物理地址（如果没有分页技术，线性地址直接变成物理地址）</p>
<h3 id="程序状态与控制寄存器"><a href="#程序状态与控制寄存器" class="headerlink" title="程序状态与控制寄存器"></a>程序状态与控制寄存器</h3><p>就是所说的标志位寄存器，一开始我认为是不同的寄存器，现在发现是一个寄存器中的不同的位</p>
<p><img src="image-20210831141323762.png" alt="image-20210831141323762"></p>
<p>32位程序中，该寄存器由原来的16位的FLAGS寄存器拓展到了32的EFLAGS寄存器，其中常用的有ZF, OF, CF。</p>
<p>ZF（0标志）：若运算结果是“0“，那么该标志位为”1“</p>
<p>OF（溢出标志）：有符号整数溢出时，该标志位为”1“；或最高有效位改变时，该标志位为”1“</p>
<p>CF（进位标志）：无符号整数溢出时为”1“</p>
<h3 id="指令指针寄存器"><a href="#指令指针寄存器" class="headerlink" title="指令指针寄存器"></a>指令指针寄存器</h3><p>当程序运行时，cpu会读取EIP中的一条地址，当地址传递到缓冲区后，eip会增加，增加的大小就是读取指令的字节大小。</p>
<h2 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h2><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul>
<li><p>一种由高地址像低地址拓展的数据结构</p>
</li>
<li><p>暂时保存函数内部的局部变量</p>
</li>
<li>传递参数</li>
<li>保存函数的返回地址（就是call指令的下一条地址）</li>
</ul>
<p><img src="image-20210831142251690.png" alt="image-20210831142251690"></p>
<h3 id="栈操作"><a href="#栈操作" class="headerlink" title="栈操作"></a>栈操作</h3><p>1.两个指针：栈顶指针ESP；栈帧指针EBP</p>
<p>2.向栈中push数据时，栈顶指针ESP会减小（上移），当pop数据时，ESP会增加（下移）。</p>
<p>3.栈顶指针（ESP）在初始状态下指向栈底（高地址），所以初始化栈即为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push EBP		//使用EBP前先将已有值保存在栈中</span><br><span class="line">MOV EBP, ESP	//保存当前ESP到EBP中</span><br><span class="line">……</span><br><span class="line">MOV ESP, EBP	//将函数的起始地址还给ESP</span><br><span class="line">POP EBP			//将一开始push进栈的地址还给EBP</span><br></pre></td></tr></table></figure>
<h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><p>1.是什么：是利用EBP（栈帧指针）寄存器访问栈内局部变量、参数、函数返回地址等的手段。 </p>
<p>2.为什么需要用到栈帧指针EBP：因为栈顶是在不断变化的（push, pop, call等都会影响栈顶），所以如果用ESP来当作基址进行索引是很复杂的，所以就需要一个相对固定的来打下手的帮忙，就是EBP。所以在开始的时候，都会把esp的值给ebp。</p>
<h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h2><h3 id="cdecl"><a href="#cdecl" class="headerlink" title="_cdecl"></a>_cdecl</h3><p>C语言的默认调用方式，调用者负责恢复栈结构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add esp, 0x8</span><br></pre></td></tr></table></figure>
<p><img src="image-20210831151852977.png" alt="image-20210831151852977"  /></p>
<p>这里因为push了两个int类型的参数，所以栈空间-0x8</p>
<p>好处：可以向 被调用函数 传递 参数可变 的函数</p>
<h3 id="stdcall"><a href="#stdcall" class="headerlink" title="stdcall"></a>stdcall</h3><p>由被调用者恢复堆栈</p>
<p>该调用方式被Win32 API采用，以获得更好的兼容性</p>
<h3 id="fastcall"><a href="#fastcall" class="headerlink" title="fastcall"></a>fastcall</h3><p>与stdcall类似，只不过前两个参数通过寄存器【ECX, EDX】快速调用。顾名思义，这里可以实现更快的调用函数，因为CPU访问寄存器的速度远高于CPU访问内存的速度。</p>
]]></content>
      <categories>
        <category>逆向工程学习</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>计</title>
    <url>/2021/08/30/%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="————忘掉掌声，按自己的方式，继续前行，跑过一生"><a href="#————忘掉掌声，按自己的方式，继续前行，跑过一生" class="headerlink" title="————忘掉掌声，按自己的方式，继续前行，跑过一生"></a>————忘掉掌声，按自己的方式，继续前行，跑过一生</h1><ul>
<li>每周至少要联系一次家里人，报个平安</li>
</ul>
<ul>
<li>每周起码更新四次技术性博客</li>
</ul>
<ul>
<li>每月至少熟悉一项二进制技术或某个工具的使用</li>
</ul>
<ul>
<li>每月读古籍，并记录感悟</li>
</ul>
<ul>
<li>每月起码发表一篇技术性文章到博客</li>
</ul>
<ul>
<li>每月至少参见一次比赛，背100个单词</li>
</ul>
<ul>
<li>周报，月报，年报，日记有事则记</li>
</ul>
<ul>
<li>有空多做题，多记录，少看手机</li>
</ul>
<ul>
<li>克勤克俭，戒骄戒躁</li>
</ul>
<h1 id="————但使龙城飞将在，不教胡马度阴山。"><a href="#————但使龙城飞将在，不教胡马度阴山。" class="headerlink" title="————但使龙城飞将在，不教胡马度阴山。"></a>————但使龙城飞将在，不教胡马度阴山。</h1>]]></content>
      <categories>
        <category>计2021</category>
      </categories>
  </entry>
  <entry>
    <title>科目三学习</title>
    <url>/2021/08/29/%E7%A7%91%E7%9B%AE%E4%B8%89%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="一-灯光模拟："><a href="#一-灯光模拟：" class="headerlink" title="一.灯光模拟："></a>一.灯光模拟：</h1><h2 id="1-近光灯："><a href="#1-近光灯：" class="headerlink" title="1.近光灯："></a>1.近光灯：</h2><p>同方向近距离跟车行驶。</p>
<p>通过有信号灯控制路口。</p>
<p>在有路灯照明良好的道路上行驶。</p>
<p>与非机动车会车。</p>
<span id="more"></span>
<h2 id="2-远光灯："><a href="#2-远光灯：" class="headerlink" title="2.远光灯："></a>2.远光灯：</h2><p>进入<strong>无照明</strong>的道路行驶。</p>
<p>夜间进入<strong>照明不良</strong>的道路行驶。</p>
<h2 id="3-交替灯光："><a href="#3-交替灯光：" class="headerlink" title="3.交替灯光："></a>3.交替灯光：</h2><p>超车。</p>
<p><strong>通过</strong>急弯，坡路，拱桥，人行横道，没有交通信号灯控制的路口。</p>
<h2 id="4-小灯-四闪："><a href="#4-小灯-四闪：" class="headerlink" title="4.小灯+四闪："></a>4.小灯+四闪：</h2><p>在路边临时停车。</p>
<h1 id="二-行驶："><a href="#二-行驶：" class="headerlink" title="二.行驶："></a>二.行驶：</h1><h3 id="（0）挡位与速度匹配："><a href="#（0）挡位与速度匹配：" class="headerlink" title="（0）挡位与速度匹配："></a>（0）挡位与速度匹配：</h3><p>15挂2挡，25挂三档，35挂四档。</p>
<p>但是这里不是很严格，三档开到40也可以，但是要快速换挡。</p>
<h3 id="（1）准备起步："><a href="#（1）准备起步：" class="headerlink" title="（1）准备起步："></a>（1）准备起步：</h3><p>1.<strong>逆时针</strong>绕车一圈。</p>
<p>2.报告考官请求上车。</p>
<p>3.座椅，后视镜，安全带。</p>
<p>4.<strong>离合回空挡，松离合，打火</strong>，模拟灯光。</p>
<p>5.报告个仪表工作正常，请求起步。</p>
<h3 id="（2）起步："><a href="#（2）起步：" class="headerlink" title="（2）起步："></a>（2）起步：</h3><p>（一踩二挂三转向，四喇叭五看后镜六手刹，轻抬离合把油加）</p>
<p>1.踩离合挂一档。 </p>
<p>2.拨左向灯，鸣喇叭。</p>
<p>3.观察<strong>左右后视镜，回头看</strong>，慢松离合，松手刹。</p>
<h3 id="（3）超车："><a href="#（3）超车：" class="headerlink" title="（3）超车："></a>（3）超车：</h3><p><strong><em>超</em></strong></p>
<p>1.听到指令，左转向灯，看<strong>左后视镜，回头看</strong></p>
<p>2.三秒之后条件允许，往左转方向盘15°左右</p>
<p>3<strong>.车斜回正，右脚快到路中心，往右打方向盘，车正回正</strong></p>
<p><strong><em>回</em></strong></p>
<p>4.开右转向灯，<strong>右后视镜，回头看</strong></p>
<p>5.三秒以上，条件允许，往右转方向盘15°左右</p>
<p>6.<strong>车斜回正，右脚快到路中心，往左打方向盘，车正回正</strong></p>
<h3 id="（4）路口左转弯："><a href="#（4）路口左转弯：" class="headerlink" title="（4）路口左转弯："></a>（4）路口左转弯：</h3><p>1.听到指令，左转向灯</p>
<p>2.路口前减速至1，2挡，左右观察</p>
<p>3.肩头快超过人行道时，左打四分之一方向盘</p>
<p>4.左右观察</p>
<p>5.条件允许进入中间车道，回正方向，加速加挡</p>
<h3 id="（5）人行道，学校，公交站，前方路口直行："><a href="#（5）人行道，学校，公交站，前方路口直行：" class="headerlink" title="（5）人行道，学校，公交站，前方路口直行："></a>（5）人行道，学校，公交站，前方路口直行：</h3><p>1.看（听）到后点刹车，左右观察</p>
<p>2.学校区域减速至<strong>30公里</strong>以下</p>
<h3 id="（6）路口右转弯："><a href="#（6）路口右转弯：" class="headerlink" title="（6）路口右转弯："></a>（6）路口右转弯：</h3><p>1.听到指令，右转向灯</p>
<p>2.路口前减速至1，2挡，左右观察</p>
<p>3.肩头快超过人行道时，右打一半方向盘</p>
<p>4.观察来车方向</p>
<p>5.条件允许进入中间车道，回正方向，加速加挡</p>
<h3 id="（7）掉头："><a href="#（7）掉头：" class="headerlink" title="（7）掉头："></a>（7）掉头：</h3><p>1.听到指令后，左转向灯</p>
<p>2.路口前减速到1挡，左右观察</p>
<p>3.肩膀过绿化带，桥墩左打一圈，观察来车方向</p>
<p>4.条件允许，中间车道加速加档</p>
<h3 id="（8）靠边停车："><a href="#（8）靠边停车：" class="headerlink" title="（8）靠边停车："></a>（8）靠边停车：</h3><p><strong>一定要注意前车的距离，要有一定的距离可以把车顺正，不然就会挂科 操他妈的</strong></p>
<p>1.听到指令，右转向灯</p>
<p>2.<strong>看右后视镜，向后看</strong>，减速减挡到1挡</p>
<p>3.慢松离合，选好地点，右打半圈方向</p>
<p>4.看铆钉到马路牙子下沿，回方向（打一次，回两次）</p>
<p>5.让铆钉压着路边白线行驶后 停车</p>
<p>6.拉手刹，推空挡，关转向灯，熄火，挂一档，解安全带，后拉座椅；报告考官，请求下车</p>
<p>（手刹空挡转向灯，熄火一档安全带）</p>
<p>7.<strong>看左后视镜，后头看</strong>，确认安全，下车顺时针到考官处，<strong>谢谢考官</strong></p>
]]></content>
      <categories>
        <category>悠哉日常</category>
      </categories>
      <tags>
        <tag>学车</tag>
      </tags>
  </entry>
  <entry>
    <title>东北大学招新_re</title>
    <url>/2021/08/29/%E4%B8%9C%E5%8C%97%E5%A4%A7%E5%AD%A6%E6%8B%9B%E6%96%B0-re/</url>
    <content><![CDATA[<p> elf文件，ida64打开，看到程序很简单的加密，但是涉及到<strong>数据类型之间的转化和经典的逆向过程</strong></p>
<span id="more"></span>
<p><img src="image-20210829132912959.png" alt="image-20210829132912959"></p>
<p>确定了输入的flag是22位，然后经过三轮运算，将得到的和给出的数组进行比较，逻辑简单，开始逆向！</p>
<h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先将三轮运算逆向回去</span></span><br><span class="line">targ=[  <span class="number">0x03</span>, <span class="number">0x1D</span>, <span class="number">0x24</span>, <span class="number">0x1C</span>, <span class="number">0x06</span>, <span class="number">0x1A</span>, <span class="number">0x3C</span>, <span class="number">0x3F</span>, <span class="number">0x04</span>, <span class="number">0x32</span>,</span><br><span class="line">  		<span class="number">0x3E</span>, <span class="number">0x11</span>, <span class="number">0x1C</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x1F</span>, <span class="number">0xFD</span>, <span class="number">0x09</span>, <span class="number">0xF3</span>, <span class="number">0xFB</span>,</span><br><span class="line">      	<span class="number">0x98</span>, <span class="number">0x92</span>, <span class="number">0x00</span>]</span><br><span class="line"><span class="comment">#每一位和后一位异或，所以最后一位是不会变的，这就是突破口</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    targ[<span class="number">21</span>-i]=targ[<span class="number">21</span>-i]^targ[<span class="number">22</span>-i]</span><br><span class="line"><span class="built_in">print</span>(targ)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    targ[<span class="number">21</span>-i]=targ[<span class="number">21</span>-i]-targ[<span class="number">22</span>-i]</span><br><span class="line"><span class="built_in">print</span>(targ)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    targ[i]-=i</span><br><span class="line"><span class="built_in">print</span>(targ)</span><br></pre></td></tr></table></figure>
<p>这时得到的数组是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">targ=[-<span class="number">154</span>, <span class="number">365</span>, -<span class="number">157</span>, <span class="number">362</span>, -<span class="number">129</span>, <span class="number">374</span>, -<span class="number">131</span>, <span class="number">364</span>, -<span class="number">151</span>, <span class="number">385</span>,</span><br><span class="line">      -<span class="number">147</span>, <span class="number">367</span>, -<span class="number">141</span>, <span class="number">384</span>, -<span class="number">145</span>, <span class="number">373</span>, -<span class="number">140</span>, <span class="number">386</span>, -<span class="number">375</span>, <span class="number">377</span>, </span><br><span class="line">      -<span class="number">136</span>, <span class="number">146</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>这里很明显看到因为python的数据类型基本没有限制，所以会出现 很多大数和负数</p>
<p>在C语言里面，一个byte的无符号整数是0-255，这里看到程序里面都是单字节，所以会出现循环现象，这里将他门进行复原</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    <span class="keyword">if</span> targ[i]&gt;<span class="number">255</span>:</span><br><span class="line">        targ[i]%=<span class="number">256</span></span><br><span class="line"><span class="comment">#因为这里超过256会循环，所以要%256</span></span><br><span class="line">    <span class="keyword">if</span> targ[i]&lt;<span class="number">0</span>:</span><br><span class="line">        targ[i]&amp;=<span class="number">0xffffffff</span></span><br><span class="line"><span class="comment">#考虑到负数的缘故，要先将负数转化成正数（有符号数转化无符号数）</span></span><br><span class="line"><span class="built_in">print</span>(targ)</span><br><span class="line"></span><br><span class="line"><span class="comment">#最后统一规矩一下数据，然后字符输出就可以了</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>):</span><br><span class="line">    <span class="keyword">if</span> targ[i]&gt;<span class="number">255</span>:</span><br><span class="line">        targ[i]%=<span class="number">256</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(targ[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(targ)</span><br></pre></td></tr></table></figure>
<p>最后得到flag：</p>
<p><strong>flag{qweaxcdgsafdqwfd}</strong></p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>博客改良(持续记录)</title>
    <url>/2021/08/28/%E5%8D%9A%E5%AE%A2%E6%94%B9%E8%89%AF/</url>
    <content><![CDATA[<h2 id="1-删除强力驱动："><a href="#1-删除强力驱动：" class="headerlink" title="1.删除强力驱动："></a>1.删除强力驱动：</h2><p>1.在【themes/layout/_partial/footer】文件中的最后，删除如下代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme<span class="selector-class">.footer</span><span class="selector-class">.powered</span> %&#125;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;powered-by&quot;&gt;</span><br><span class="line">    &#123;%- set next_site = &#x27;https://theme-next.js.org<span class="string">&#x27; if theme.scheme === &#x27;</span>Gemini<span class="string">&#x27; else &#x27;</span>https://theme-next.js.org/<span class="string">&#x27; + theme.scheme | lower + &#x27;</span>/<span class="string">&#x27; %&#125;</span></span><br><span class="line"><span class="string">    &#123;&#123;- __(&#x27;</span>footer.powered<span class="string">&#x27;, next_url(&#x27;</span>https://hexo.io<span class="string">&#x27;, &#x27;</span>Hexo<span class="string">&#x27;) + &#x27;</span> &amp; <span class="string">&#x27; + next_url(next_site, &#x27;</span>NexT.<span class="string">&#x27; + theme.scheme)) &#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#123;%- endif %&#125;</span></span><br></pre></td></tr></table></figure>
<p>2.同样，如果想在该位置添加一些别的文字，直接在这个文件里面加就行</p>
<span id="more"></span>
<h2 id="2-更改字体颜色："><a href="#2-更改字体颜色：" class="headerlink" title="2.更改字体颜色："></a>2.更改字体颜色：</h2><p>在_data文件里面添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span> #色号</span><br></pre></td></tr></table></figure>
<p><img src="image-20210828115628268.png" alt="image-20210828115628268"></p>
<p><img src="image-20210828115713939.png" alt="image-20210828115713939"></p>
<p><img src="image-20210828115742828.png" alt="image-20210828115742828"></p>
<h2 id="3-利用不通的分类："><a href="#3-利用不通的分类：" class="headerlink" title="3.利用不通的分类："></a>3.利用不通的分类：</h2><p>这里用“categories”为例</p>
<p>找到在categories目录下的哪个index.md文件，在开头的地方加上一行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">type: <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="image-20210828122741712.png" alt="image-20210828122741712"></p>
<p>这样就可以在那个界面里面看到不通的分类了</p>
<h2 id="4-在文中添加超链接"><a href="#4-在文中添加超链接" class="headerlink" title="4.在文中添加超链接"></a>4.在文中添加超链接</h2><p>利用markdown特性，将链接放在&lt;&gt;中间</p>
<p>例如<a href="https://hellorootkit.github.io">https://hellorootkit.github.io</a></p>
<h2 id="5-修改字体颜色"><a href="#5-修改字体颜色" class="headerlink" title="5.修改字体颜色"></a>5.修改字体颜色</h2><h3 id="1-修改博文标题："><a href="#1-修改博文标题：" class="headerlink" title="1.修改博文标题："></a>1.修改博文标题：</h3><p>找到目录\hexo-theme-next\source\css_common\components\post下的post-header文件</p>
<p>然后找到.post-title-link</p>
<p>修改颜色即可生效</p>
<h3 id="2-修改博文颜色："><a href="#2-修改博文颜色：" class="headerlink" title="2.修改博文颜色："></a>2.修改博文颜色：</h3><p>同2</p>
<h3 id="3-日志分类标签统计："><a href="#3-日志分类标签统计：" class="headerlink" title="3.日志分类标签统计："></a>3.日志分类标签统计：</h3><p>目录\hexo-theme-next\source\css_common\outline\sidebar\site-state.styl</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-state-item-name</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#40E0D0</span>;//$site-state-item-name-<span class="attribute">color</span>;//日志，分类，标签的颜色</span><br><span class="line">  <span class="attribute">font-size</span>: $site-state-item-name-font-size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-头像下面和描述："><a href="#4-头像下面和描述：" class="headerlink" title="4.头像下面和描述："></a>4.头像下面和描述：</h3><p>目录\hexo-theme-next\source\css_common\outline\sidebar\author.styl</p>
<h3 id="5-站点描述："><a href="#5-站点描述：" class="headerlink" title="5.站点描述："></a>5.站点描述：</h3><p>themes\hexo-theme-next\source\css_schemes\Pisces_sidebar.styl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">.sidebar-inner &#123;//站点概况</span><br><span class="line">  background: rgba(128,138,135,0.1)//var(--content-bg-color);</span><br><span class="line">  border-radius: $border-radius;</span><br><span class="line">  box-shadow: $box-shadow;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  color: var(--text-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客装修</category>
      </categories>
  </entry>
  <entry>
    <title>insert_photo</title>
    <url>/2021/08/27/insert-photo/</url>
    <content><![CDATA[<p>​    Do you konw how to insert photo?</p>
<p><img src="image-20210827212032824.png" alt="image-20210827212032824"></p>
]]></content>
  </entry>
  <entry>
    <title>how2buildBlog</title>
    <url>/2021/08/27/how2buildBlog/</url>
    <content><![CDATA[<p> 搭建好博客，记录搭建过程：</p>
<h1 id="搭建博客："><a href="#搭建博客：" class="headerlink" title="搭建博客："></a>搭建博客：</h1><p>博客搭建基于【Github+hexo】模式；用的是hexo的next的模板。</p>
<h2 id="准备工具："><a href="#准备工具：" class="headerlink" title="准备工具："></a>准备工具：</h2><p>1.git</p>
<p>2.hexo</p>
<p>3.github</p>
<p>4.nodejs</p>
<h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><p>1.首先是在GitHub上创建一个仓库，仓库名称需为：名称.github.io</p>
<p>名称最好是和仓库名相同，这样方便索引：</p>
<span id="more"></span>
<p><img src="image-20210827182643655.png" alt="image-20210827182643655"></p>
<p>像这样即可</p>
<p>2.然后需要先安装git（熟悉Windows的可以直接用cmd）；然后下载nodejs，用<code>node -v</code>进行检查是否安装成功；然后安装<code>npm install hexo -g</code>用命令：<code>hexo -v</code>查看是否安装成功；之后需要安装hexo的一系列的以来文件<code>nmp install hexo-deployer-git --save</code>,这里需要注意的是—save的位置可以放到install那里，这个看个人情况。</p>
<p>3.这里最后需要配置SSH KEY，相当于一个身份验证：</p>
<p>通过git，输入命令：<code>cd ~/.ssh</code>进入ssh文件——-&gt;通过命令<code>cat id_rsa.pub</code>查看密钥，然后在github的设置里：</p>
<p><img src="image-20210827183729815.png" alt="image-20210827183729815"></p>
<p>将刚刚的一大串直接复制进去，这样就可以了</p>
<p>用<code>ssh -T git@github.com</code>检验是否成功</p>
<p>成功用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;liyunchen&quot; #你的github用户名</span><br><span class="line">$ git config --global user.email &quot;xxx@163.com&quot; #填写你的github注册邮箱</span><br></pre></td></tr></table></figure>
<p>命令来设置邮箱和用户名</p>
<h2 id="开始搭建："><a href="#开始搭建：" class="headerlink" title="开始搭建："></a>开始搭建：</h2><p>1.在一个较大的盘里新建文件夹，取一个洋文名字防止出灵异事件</p>
<p>2.git bash here，在该目录下打开git</p>
<p>3.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.hexo init</span><br><span class="line"><span class="comment">#初始化hexo，此时目录下多了一堆文件</span></span><br></pre></td></tr></table></figure>
<p>事先在<a href="https://hexo.io/themes/里下载好主题，将主题文件夹拖进【themes】文件夹然后回到主目录，用记事本打开主目录里的_config.yml文件，划到最后，找到themes：">https://hexo.io/themes/里下载好主题，将主题文件夹拖进【themes】文件夹然后回到主目录，用记事本打开主目录里的_config.yml文件，划到最后，找到themes：</a></p>
<p><img src="image-20210827184605759.png" alt="image-20210827184605759"></p>
<p>这里标黄的是要改成自己的仓库，下面的branch根据实际情况决定是main还是master。</p>
<p>themes后面跟的是主题的文件夹的名字，注意空格，<strong>千万不能少</strong></p>
<p>4.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.hexo s<span class="comment">#在本机生成一个预览可以看到效果</span></span><br><span class="line">2.hexo g<span class="comment">#生成html界面</span></span><br><span class="line">3.hexo d<span class="comment">#部署到github</span></span><br></pre></td></tr></table></figure>
<p>此时就可以看到自己的博客的初始状态，也就搭建基本完毕了</p>
<h1 id="完善博客："><a href="#完善博客：" class="headerlink" title="完善博客："></a>完善博客：</h1><p>搭建好之后需要完善成人类友好的界面（next为例子）</p>
<h2 id="1-首页风格："><a href="#1-首页风格：" class="headerlink" title="1.首页风格："></a>1.首页风格：</h2><p>找到你下载的主题里的_config.yml文件（没错，主题里面也有）</p>
<p>找到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这里是四种风格，选一个喜欢的去掉前面的井号</span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br><span class="line">//这里是模式，亮还是暗</span><br><span class="line"># Dark Mode</span><br><span class="line">darkmode: true</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这里是菜单设置，去掉喜欢的前面的#</span><br><span class="line">menu:</span><br><span class="line">  home: / || home                          //首页</span><br><span class="line">  archives: /archives/ || archive          //归档</span><br><span class="line">  categories: /categories/ || th           //分类</span><br><span class="line">  tags: /tags/ || tags                     //标签</span><br><span class="line">  about: /about/ || user                   //关于</span><br><span class="line">  #schedule: /schedule/ || calendar        //日程表</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap        //站点地图</span><br><span class="line">  #commonweal: /404/ || heartbeat          //公益404</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//侧栏设置，看好适用风格</span><br><span class="line"># Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）</span><br><span class="line">  position: left        //靠左放置</span><br><span class="line">  #position: right      //靠右放置</span><br><span class="line"></span><br><span class="line"># Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）</span><br><span class="line">  #display: post        //默认行为，在文章页面（拥有目录列表）时显示</span><br><span class="line">  display: always       //在所有页面中都显示</span><br><span class="line">  #display: hide        //在所有页面中都隐藏（可以手动展开）</span><br><span class="line">  #display: remove      //完全移除</span><br><span class="line"></span><br><span class="line">  offset: 12            //文章间距（只对Pisces | Gemini两种风格有效）</span><br><span class="line"></span><br><span class="line">  b2t: false            //返回顶部按钮（只对Pisces | Gemini两种风格有效）</span><br><span class="line"></span><br><span class="line">  scrollpercent: true   //返回顶部按钮的百分比</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头像设置，将头像设为header.jpg，然后拖到themes\hexo-theme-next\source\images目录下</span><br><span class="line"># Sidebar Avatar</span><br><span class="line">avatar: /images/header.jpg</span><br></pre></td></tr></table></figure>
<h2 id="2-语言文字："><a href="#2-语言文字：" class="headerlink" title="2.语言文字："></a>2.语言文字：</h2><p>打开主目录的_config.yml文件，开头就是这几个，后面的内容自己写写，注意空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: R-o-o-t-k-i-t</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: 自由，平等，公正，法制</span><br><span class="line">keywords: rootkit，+-*/</span><br><span class="line">author: rootkit/+-*</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#x27;&#x27;#网站时区（Hexo 默认使用您电脑的时区，不用写）</span><br></pre></td></tr></table></figure>
<h1 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h1><p><img src="image-20210827190155039.png" alt="image-20210827190155039"></p>
<h1 id="上传日志："><a href="#上传日志：" class="headerlink" title="上传日志："></a>上传日志：</h1><p>在该文件夹里通过git或者cmd使用命令<code>hexo new &#39;#######&#39;</code>,就会在sources目录里生成一个#####.md文件，然后正常写点东西（在下面的正文部分，上面的灰色框是自带的）</p>
<p>写完之后通过命令<code>hexo g</code>和<code>hexo d</code>来上传</p>
<p>这样就完成了上面的效果。</p>
]]></content>
      <categories>
        <category>博客装修</category>
      </categories>
      <tags>
        <tag>关于博客</tag>
      </tags>
  </entry>
</search>
